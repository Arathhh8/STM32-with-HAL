
002BlinkLedSemihosting.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000020a8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b4  080021b4  080021b4  000121b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002268  08002268  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08002268  08002268  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002268  08002268  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002268  08002268  00012268  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800226c  0800226c  0001226c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08002270  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e0  20000078  080022e8  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000158  080022e8  00020158  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002e65  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000f9f  00000000  00000000  00022f06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000408  00000000  00000000  00023ea8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000360  00000000  00000000  000242b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016b1e  00000000  00000000  00024610  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000051ac  00000000  00000000  0003b12e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007fca0  00000000  00000000  000402da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000bff7a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000017a0  00000000  00000000  000bffcc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000078 	.word	0x20000078
 8000128:	00000000 	.word	0x00000000
 800012c:	0800219c 	.word	0x0800219c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000007c 	.word	0x2000007c
 8000148:	0800219c 	.word	0x0800219c

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b088      	sub	sp, #32
 8000160:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000162:	f107 0310 	add.w	r3, r7, #16
 8000166:	2200      	movs	r2, #0
 8000168:	601a      	str	r2, [r3, #0]
 800016a:	605a      	str	r2, [r3, #4]
 800016c:	609a      	str	r2, [r3, #8]
 800016e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000170:	4b1e      	ldr	r3, [pc, #120]	; (80001ec <MX_GPIO_Init+0x90>)
 8000172:	699b      	ldr	r3, [r3, #24]
 8000174:	4a1d      	ldr	r2, [pc, #116]	; (80001ec <MX_GPIO_Init+0x90>)
 8000176:	f043 0310 	orr.w	r3, r3, #16
 800017a:	6193      	str	r3, [r2, #24]
 800017c:	4b1b      	ldr	r3, [pc, #108]	; (80001ec <MX_GPIO_Init+0x90>)
 800017e:	699b      	ldr	r3, [r3, #24]
 8000180:	f003 0310 	and.w	r3, r3, #16
 8000184:	60fb      	str	r3, [r7, #12]
 8000186:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000188:	4b18      	ldr	r3, [pc, #96]	; (80001ec <MX_GPIO_Init+0x90>)
 800018a:	699b      	ldr	r3, [r3, #24]
 800018c:	4a17      	ldr	r2, [pc, #92]	; (80001ec <MX_GPIO_Init+0x90>)
 800018e:	f043 0320 	orr.w	r3, r3, #32
 8000192:	6193      	str	r3, [r2, #24]
 8000194:	4b15      	ldr	r3, [pc, #84]	; (80001ec <MX_GPIO_Init+0x90>)
 8000196:	699b      	ldr	r3, [r3, #24]
 8000198:	f003 0320 	and.w	r3, r3, #32
 800019c:	60bb      	str	r3, [r7, #8]
 800019e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80001a0:	4b12      	ldr	r3, [pc, #72]	; (80001ec <MX_GPIO_Init+0x90>)
 80001a2:	699b      	ldr	r3, [r3, #24]
 80001a4:	4a11      	ldr	r2, [pc, #68]	; (80001ec <MX_GPIO_Init+0x90>)
 80001a6:	f043 0304 	orr.w	r3, r3, #4
 80001aa:	6193      	str	r3, [r2, #24]
 80001ac:	4b0f      	ldr	r3, [pc, #60]	; (80001ec <MX_GPIO_Init+0x90>)
 80001ae:	699b      	ldr	r3, [r3, #24]
 80001b0:	f003 0304 	and.w	r3, r3, #4
 80001b4:	607b      	str	r3, [r7, #4]
 80001b6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Led_GPIO_Port, Led_Pin, GPIO_PIN_SET);
 80001b8:	2201      	movs	r2, #1
 80001ba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001be:	480c      	ldr	r0, [pc, #48]	; (80001f0 <MX_GPIO_Init+0x94>)
 80001c0:	f000 fc32 	bl	8000a28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Led_Pin;
 80001c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80001c8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80001ca:	2301      	movs	r3, #1
 80001cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001ce:	2300      	movs	r3, #0
 80001d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80001d2:	2302      	movs	r3, #2
 80001d4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Led_GPIO_Port, &GPIO_InitStruct);
 80001d6:	f107 0310 	add.w	r3, r7, #16
 80001da:	4619      	mov	r1, r3
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <MX_GPIO_Init+0x94>)
 80001de:	f000 fa9f 	bl	8000720 <HAL_GPIO_Init>

}
 80001e2:	bf00      	nop
 80001e4:	3720      	adds	r7, #32
 80001e6:	46bd      	mov	sp, r7
 80001e8:	bd80      	pop	{r7, pc}
 80001ea:	bf00      	nop
 80001ec:	40021000 	.word	0x40021000
 80001f0:	40011000 	.word	0x40011000

080001f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001f4:	b580      	push	{r7, lr}
 80001f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001f8:	f000 f928 	bl	800044c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001fc:	f000 f820 	bl	8000240 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000200:	f7ff ffac 	bl	800015c <MX_GPIO_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  initialise_monitor_handles();
 8000204:	f001 ff4e 	bl	80020a4 <initialise_monitor_handles>
  while (1)
  {
	  HAL_GPIO_WritePin(Led_GPIO_Port, Led_Pin, GPIO_PIN_SET);
 8000208:	2201      	movs	r2, #1
 800020a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800020e:	480a      	ldr	r0, [pc, #40]	; (8000238 <main+0x44>)
 8000210:	f000 fc0a 	bl	8000a28 <HAL_GPIO_WritePin>
	  HAL_Delay(1000);
 8000214:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000218:	f000 f97a 	bl	8000510 <HAL_Delay>
	  HAL_GPIO_WritePin(Led_GPIO_Port, Led_Pin, GPIO_PIN_RESET);
 800021c:	2200      	movs	r2, #0
 800021e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000222:	4805      	ldr	r0, [pc, #20]	; (8000238 <main+0x44>)
 8000224:	f000 fc00 	bl	8000a28 <HAL_GPIO_WritePin>
	  HAL_Delay(1000);
 8000228:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800022c:	f000 f970 	bl	8000510 <HAL_Delay>
	  printf("Blinking led\n");
 8000230:	4802      	ldr	r0, [pc, #8]	; (800023c <main+0x48>)
 8000232:	f001 f88f 	bl	8001354 <puts>
	  HAL_GPIO_WritePin(Led_GPIO_Port, Led_Pin, GPIO_PIN_SET);
 8000236:	e7e7      	b.n	8000208 <main+0x14>
 8000238:	40011000 	.word	0x40011000
 800023c:	080021b4 	.word	0x080021b4

08000240 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000240:	b580      	push	{r7, lr}
 8000242:	b090      	sub	sp, #64	; 0x40
 8000244:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000246:	f107 0318 	add.w	r3, r7, #24
 800024a:	2228      	movs	r2, #40	; 0x28
 800024c:	2100      	movs	r1, #0
 800024e:	4618      	mov	r0, r3
 8000250:	f001 f80a 	bl	8001268 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000254:	1d3b      	adds	r3, r7, #4
 8000256:	2200      	movs	r2, #0
 8000258:	601a      	str	r2, [r3, #0]
 800025a:	605a      	str	r2, [r3, #4]
 800025c:	609a      	str	r2, [r3, #8]
 800025e:	60da      	str	r2, [r3, #12]
 8000260:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000262:	2301      	movs	r3, #1
 8000264:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000266:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800026a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800026c:	2300      	movs	r3, #0
 800026e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000270:	2301      	movs	r3, #1
 8000272:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000274:	2302      	movs	r3, #2
 8000276:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000278:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800027c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800027e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000282:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000284:	f107 0318 	add.w	r3, r7, #24
 8000288:	4618      	mov	r0, r3
 800028a:	f000 fbe5 	bl	8000a58 <HAL_RCC_OscConfig>
 800028e:	4603      	mov	r3, r0
 8000290:	2b00      	cmp	r3, #0
 8000292:	d001      	beq.n	8000298 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000294:	f000 f819 	bl	80002ca <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000298:	230f      	movs	r3, #15
 800029a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800029c:	2302      	movs	r3, #2
 800029e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002a0:	2300      	movs	r3, #0
 80002a2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002a8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002aa:	2300      	movs	r3, #0
 80002ac:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002ae:	1d3b      	adds	r3, r7, #4
 80002b0:	2102      	movs	r1, #2
 80002b2:	4618      	mov	r0, r3
 80002b4:	f000 fe52 	bl	8000f5c <HAL_RCC_ClockConfig>
 80002b8:	4603      	mov	r3, r0
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d001      	beq.n	80002c2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80002be:	f000 f804 	bl	80002ca <Error_Handler>
  }
}
 80002c2:	bf00      	nop
 80002c4:	3740      	adds	r7, #64	; 0x40
 80002c6:	46bd      	mov	sp, r7
 80002c8:	bd80      	pop	{r7, pc}

080002ca <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80002ca:	b480      	push	{r7}
 80002cc:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80002ce:	b672      	cpsid	i
}
 80002d0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80002d2:	e7fe      	b.n	80002d2 <Error_Handler+0x8>

080002d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80002d4:	b480      	push	{r7}
 80002d6:	b085      	sub	sp, #20
 80002d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80002da:	4b15      	ldr	r3, [pc, #84]	; (8000330 <HAL_MspInit+0x5c>)
 80002dc:	699b      	ldr	r3, [r3, #24]
 80002de:	4a14      	ldr	r2, [pc, #80]	; (8000330 <HAL_MspInit+0x5c>)
 80002e0:	f043 0301 	orr.w	r3, r3, #1
 80002e4:	6193      	str	r3, [r2, #24]
 80002e6:	4b12      	ldr	r3, [pc, #72]	; (8000330 <HAL_MspInit+0x5c>)
 80002e8:	699b      	ldr	r3, [r3, #24]
 80002ea:	f003 0301 	and.w	r3, r3, #1
 80002ee:	60bb      	str	r3, [r7, #8]
 80002f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80002f2:	4b0f      	ldr	r3, [pc, #60]	; (8000330 <HAL_MspInit+0x5c>)
 80002f4:	69db      	ldr	r3, [r3, #28]
 80002f6:	4a0e      	ldr	r2, [pc, #56]	; (8000330 <HAL_MspInit+0x5c>)
 80002f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80002fc:	61d3      	str	r3, [r2, #28]
 80002fe:	4b0c      	ldr	r3, [pc, #48]	; (8000330 <HAL_MspInit+0x5c>)
 8000300:	69db      	ldr	r3, [r3, #28]
 8000302:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000306:	607b      	str	r3, [r7, #4]
 8000308:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800030a:	4b0a      	ldr	r3, [pc, #40]	; (8000334 <HAL_MspInit+0x60>)
 800030c:	685b      	ldr	r3, [r3, #4]
 800030e:	60fb      	str	r3, [r7, #12]
 8000310:	68fb      	ldr	r3, [r7, #12]
 8000312:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000316:	60fb      	str	r3, [r7, #12]
 8000318:	68fb      	ldr	r3, [r7, #12]
 800031a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800031e:	60fb      	str	r3, [r7, #12]
 8000320:	4a04      	ldr	r2, [pc, #16]	; (8000334 <HAL_MspInit+0x60>)
 8000322:	68fb      	ldr	r3, [r7, #12]
 8000324:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000326:	bf00      	nop
 8000328:	3714      	adds	r7, #20
 800032a:	46bd      	mov	sp, r7
 800032c:	bc80      	pop	{r7}
 800032e:	4770      	bx	lr
 8000330:	40021000 	.word	0x40021000
 8000334:	40010000 	.word	0x40010000

08000338 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000338:	b480      	push	{r7}
 800033a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800033c:	e7fe      	b.n	800033c <NMI_Handler+0x4>

0800033e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800033e:	b480      	push	{r7}
 8000340:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000342:	e7fe      	b.n	8000342 <HardFault_Handler+0x4>

08000344 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000344:	b480      	push	{r7}
 8000346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000348:	e7fe      	b.n	8000348 <MemManage_Handler+0x4>

0800034a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800034a:	b480      	push	{r7}
 800034c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800034e:	e7fe      	b.n	800034e <BusFault_Handler+0x4>

08000350 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000350:	b480      	push	{r7}
 8000352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000354:	e7fe      	b.n	8000354 <UsageFault_Handler+0x4>

08000356 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000356:	b480      	push	{r7}
 8000358:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800035a:	bf00      	nop
 800035c:	46bd      	mov	sp, r7
 800035e:	bc80      	pop	{r7}
 8000360:	4770      	bx	lr

08000362 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000362:	b480      	push	{r7}
 8000364:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000366:	bf00      	nop
 8000368:	46bd      	mov	sp, r7
 800036a:	bc80      	pop	{r7}
 800036c:	4770      	bx	lr

0800036e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800036e:	b480      	push	{r7}
 8000370:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000372:	bf00      	nop
 8000374:	46bd      	mov	sp, r7
 8000376:	bc80      	pop	{r7}
 8000378:	4770      	bx	lr

0800037a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800037a:	b580      	push	{r7, lr}
 800037c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800037e:	f000 f8ab 	bl	80004d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000382:	bf00      	nop
 8000384:	bd80      	pop	{r7, pc}
	...

08000388 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000388:	b580      	push	{r7, lr}
 800038a:	b086      	sub	sp, #24
 800038c:	af00      	add	r7, sp, #0
 800038e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000390:	4a14      	ldr	r2, [pc, #80]	; (80003e4 <_sbrk+0x5c>)
 8000392:	4b15      	ldr	r3, [pc, #84]	; (80003e8 <_sbrk+0x60>)
 8000394:	1ad3      	subs	r3, r2, r3
 8000396:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000398:	697b      	ldr	r3, [r7, #20]
 800039a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800039c:	4b13      	ldr	r3, [pc, #76]	; (80003ec <_sbrk+0x64>)
 800039e:	681b      	ldr	r3, [r3, #0]
 80003a0:	2b00      	cmp	r3, #0
 80003a2:	d102      	bne.n	80003aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80003a4:	4b11      	ldr	r3, [pc, #68]	; (80003ec <_sbrk+0x64>)
 80003a6:	4a12      	ldr	r2, [pc, #72]	; (80003f0 <_sbrk+0x68>)
 80003a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80003aa:	4b10      	ldr	r3, [pc, #64]	; (80003ec <_sbrk+0x64>)
 80003ac:	681a      	ldr	r2, [r3, #0]
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	4413      	add	r3, r2
 80003b2:	693a      	ldr	r2, [r7, #16]
 80003b4:	429a      	cmp	r2, r3
 80003b6:	d207      	bcs.n	80003c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80003b8:	f000 ff2c 	bl	8001214 <__errno>
 80003bc:	4603      	mov	r3, r0
 80003be:	220c      	movs	r2, #12
 80003c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80003c2:	f04f 33ff 	mov.w	r3, #4294967295
 80003c6:	e009      	b.n	80003dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80003c8:	4b08      	ldr	r3, [pc, #32]	; (80003ec <_sbrk+0x64>)
 80003ca:	681b      	ldr	r3, [r3, #0]
 80003cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80003ce:	4b07      	ldr	r3, [pc, #28]	; (80003ec <_sbrk+0x64>)
 80003d0:	681a      	ldr	r2, [r3, #0]
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	4413      	add	r3, r2
 80003d6:	4a05      	ldr	r2, [pc, #20]	; (80003ec <_sbrk+0x64>)
 80003d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80003da:	68fb      	ldr	r3, [r7, #12]
}
 80003dc:	4618      	mov	r0, r3
 80003de:	3718      	adds	r7, #24
 80003e0:	46bd      	mov	sp, r7
 80003e2:	bd80      	pop	{r7, pc}
 80003e4:	20005000 	.word	0x20005000
 80003e8:	00000400 	.word	0x00000400
 80003ec:	20000094 	.word	0x20000094
 80003f0:	20000158 	.word	0x20000158

080003f4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80003f4:	b480      	push	{r7}
 80003f6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80003f8:	bf00      	nop
 80003fa:	46bd      	mov	sp, r7
 80003fc:	bc80      	pop	{r7}
 80003fe:	4770      	bx	lr

08000400 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000400:	f7ff fff8 	bl	80003f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000404:	480b      	ldr	r0, [pc, #44]	; (8000434 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000406:	490c      	ldr	r1, [pc, #48]	; (8000438 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000408:	4a0c      	ldr	r2, [pc, #48]	; (800043c <LoopFillZerobss+0x16>)
  movs r3, #0
 800040a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800040c:	e002      	b.n	8000414 <LoopCopyDataInit>

0800040e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800040e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000410:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000412:	3304      	adds	r3, #4

08000414 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000414:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000416:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000418:	d3f9      	bcc.n	800040e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800041a:	4a09      	ldr	r2, [pc, #36]	; (8000440 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800041c:	4c09      	ldr	r4, [pc, #36]	; (8000444 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800041e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000420:	e001      	b.n	8000426 <LoopFillZerobss>

08000422 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000422:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000424:	3204      	adds	r2, #4

08000426 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000426:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000428:	d3fb      	bcc.n	8000422 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800042a:	f000 fef9 	bl	8001220 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800042e:	f7ff fee1 	bl	80001f4 <main>
  bx lr
 8000432:	4770      	bx	lr
  ldr r0, =_sdata
 8000434:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000438:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 800043c:	08002270 	.word	0x08002270
  ldr r2, =_sbss
 8000440:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000444:	20000158 	.word	0x20000158

08000448 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000448:	e7fe      	b.n	8000448 <ADC1_2_IRQHandler>
	...

0800044c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800044c:	b580      	push	{r7, lr}
 800044e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000450:	4b08      	ldr	r3, [pc, #32]	; (8000474 <HAL_Init+0x28>)
 8000452:	681b      	ldr	r3, [r3, #0]
 8000454:	4a07      	ldr	r2, [pc, #28]	; (8000474 <HAL_Init+0x28>)
 8000456:	f043 0310 	orr.w	r3, r3, #16
 800045a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800045c:	2003      	movs	r0, #3
 800045e:	f000 f92b 	bl	80006b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000462:	200f      	movs	r0, #15
 8000464:	f000 f808 	bl	8000478 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000468:	f7ff ff34 	bl	80002d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800046c:	2300      	movs	r3, #0
}
 800046e:	4618      	mov	r0, r3
 8000470:	bd80      	pop	{r7, pc}
 8000472:	bf00      	nop
 8000474:	40022000 	.word	0x40022000

08000478 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000478:	b580      	push	{r7, lr}
 800047a:	b082      	sub	sp, #8
 800047c:	af00      	add	r7, sp, #0
 800047e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000480:	4b12      	ldr	r3, [pc, #72]	; (80004cc <HAL_InitTick+0x54>)
 8000482:	681a      	ldr	r2, [r3, #0]
 8000484:	4b12      	ldr	r3, [pc, #72]	; (80004d0 <HAL_InitTick+0x58>)
 8000486:	781b      	ldrb	r3, [r3, #0]
 8000488:	4619      	mov	r1, r3
 800048a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800048e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000492:	fbb2 f3f3 	udiv	r3, r2, r3
 8000496:	4618      	mov	r0, r3
 8000498:	f000 f935 	bl	8000706 <HAL_SYSTICK_Config>
 800049c:	4603      	mov	r3, r0
 800049e:	2b00      	cmp	r3, #0
 80004a0:	d001      	beq.n	80004a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80004a2:	2301      	movs	r3, #1
 80004a4:	e00e      	b.n	80004c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	2b0f      	cmp	r3, #15
 80004aa:	d80a      	bhi.n	80004c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80004ac:	2200      	movs	r2, #0
 80004ae:	6879      	ldr	r1, [r7, #4]
 80004b0:	f04f 30ff 	mov.w	r0, #4294967295
 80004b4:	f000 f90b 	bl	80006ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80004b8:	4a06      	ldr	r2, [pc, #24]	; (80004d4 <HAL_InitTick+0x5c>)
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80004be:	2300      	movs	r3, #0
 80004c0:	e000      	b.n	80004c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80004c2:	2301      	movs	r3, #1
}
 80004c4:	4618      	mov	r0, r3
 80004c6:	3708      	adds	r7, #8
 80004c8:	46bd      	mov	sp, r7
 80004ca:	bd80      	pop	{r7, pc}
 80004cc:	20000000 	.word	0x20000000
 80004d0:	20000008 	.word	0x20000008
 80004d4:	20000004 	.word	0x20000004

080004d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80004d8:	b480      	push	{r7}
 80004da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80004dc:	4b05      	ldr	r3, [pc, #20]	; (80004f4 <HAL_IncTick+0x1c>)
 80004de:	781b      	ldrb	r3, [r3, #0]
 80004e0:	461a      	mov	r2, r3
 80004e2:	4b05      	ldr	r3, [pc, #20]	; (80004f8 <HAL_IncTick+0x20>)
 80004e4:	681b      	ldr	r3, [r3, #0]
 80004e6:	4413      	add	r3, r2
 80004e8:	4a03      	ldr	r2, [pc, #12]	; (80004f8 <HAL_IncTick+0x20>)
 80004ea:	6013      	str	r3, [r2, #0]
}
 80004ec:	bf00      	nop
 80004ee:	46bd      	mov	sp, r7
 80004f0:	bc80      	pop	{r7}
 80004f2:	4770      	bx	lr
 80004f4:	20000008 	.word	0x20000008
 80004f8:	20000098 	.word	0x20000098

080004fc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80004fc:	b480      	push	{r7}
 80004fe:	af00      	add	r7, sp, #0
  return uwTick;
 8000500:	4b02      	ldr	r3, [pc, #8]	; (800050c <HAL_GetTick+0x10>)
 8000502:	681b      	ldr	r3, [r3, #0]
}
 8000504:	4618      	mov	r0, r3
 8000506:	46bd      	mov	sp, r7
 8000508:	bc80      	pop	{r7}
 800050a:	4770      	bx	lr
 800050c:	20000098 	.word	0x20000098

08000510 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b084      	sub	sp, #16
 8000514:	af00      	add	r7, sp, #0
 8000516:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000518:	f7ff fff0 	bl	80004fc <HAL_GetTick>
 800051c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000522:	68fb      	ldr	r3, [r7, #12]
 8000524:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000528:	d005      	beq.n	8000536 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800052a:	4b0a      	ldr	r3, [pc, #40]	; (8000554 <HAL_Delay+0x44>)
 800052c:	781b      	ldrb	r3, [r3, #0]
 800052e:	461a      	mov	r2, r3
 8000530:	68fb      	ldr	r3, [r7, #12]
 8000532:	4413      	add	r3, r2
 8000534:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000536:	bf00      	nop
 8000538:	f7ff ffe0 	bl	80004fc <HAL_GetTick>
 800053c:	4602      	mov	r2, r0
 800053e:	68bb      	ldr	r3, [r7, #8]
 8000540:	1ad3      	subs	r3, r2, r3
 8000542:	68fa      	ldr	r2, [r7, #12]
 8000544:	429a      	cmp	r2, r3
 8000546:	d8f7      	bhi.n	8000538 <HAL_Delay+0x28>
  {
  }
}
 8000548:	bf00      	nop
 800054a:	bf00      	nop
 800054c:	3710      	adds	r7, #16
 800054e:	46bd      	mov	sp, r7
 8000550:	bd80      	pop	{r7, pc}
 8000552:	bf00      	nop
 8000554:	20000008 	.word	0x20000008

08000558 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000558:	b480      	push	{r7}
 800055a:	b085      	sub	sp, #20
 800055c:	af00      	add	r7, sp, #0
 800055e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	f003 0307 	and.w	r3, r3, #7
 8000566:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000568:	4b0c      	ldr	r3, [pc, #48]	; (800059c <__NVIC_SetPriorityGrouping+0x44>)
 800056a:	68db      	ldr	r3, [r3, #12]
 800056c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800056e:	68ba      	ldr	r2, [r7, #8]
 8000570:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000574:	4013      	ands	r3, r2
 8000576:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000578:	68fb      	ldr	r3, [r7, #12]
 800057a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800057c:	68bb      	ldr	r3, [r7, #8]
 800057e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000580:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000584:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000588:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800058a:	4a04      	ldr	r2, [pc, #16]	; (800059c <__NVIC_SetPriorityGrouping+0x44>)
 800058c:	68bb      	ldr	r3, [r7, #8]
 800058e:	60d3      	str	r3, [r2, #12]
}
 8000590:	bf00      	nop
 8000592:	3714      	adds	r7, #20
 8000594:	46bd      	mov	sp, r7
 8000596:	bc80      	pop	{r7}
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop
 800059c:	e000ed00 	.word	0xe000ed00

080005a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80005a0:	b480      	push	{r7}
 80005a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005a4:	4b04      	ldr	r3, [pc, #16]	; (80005b8 <__NVIC_GetPriorityGrouping+0x18>)
 80005a6:	68db      	ldr	r3, [r3, #12]
 80005a8:	0a1b      	lsrs	r3, r3, #8
 80005aa:	f003 0307 	and.w	r3, r3, #7
}
 80005ae:	4618      	mov	r0, r3
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bc80      	pop	{r7}
 80005b4:	4770      	bx	lr
 80005b6:	bf00      	nop
 80005b8:	e000ed00 	.word	0xe000ed00

080005bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80005bc:	b480      	push	{r7}
 80005be:	b083      	sub	sp, #12
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	4603      	mov	r3, r0
 80005c4:	6039      	str	r1, [r7, #0]
 80005c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	db0a      	blt.n	80005e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005d0:	683b      	ldr	r3, [r7, #0]
 80005d2:	b2da      	uxtb	r2, r3
 80005d4:	490c      	ldr	r1, [pc, #48]	; (8000608 <__NVIC_SetPriority+0x4c>)
 80005d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005da:	0112      	lsls	r2, r2, #4
 80005dc:	b2d2      	uxtb	r2, r2
 80005de:	440b      	add	r3, r1
 80005e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80005e4:	e00a      	b.n	80005fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005e6:	683b      	ldr	r3, [r7, #0]
 80005e8:	b2da      	uxtb	r2, r3
 80005ea:	4908      	ldr	r1, [pc, #32]	; (800060c <__NVIC_SetPriority+0x50>)
 80005ec:	79fb      	ldrb	r3, [r7, #7]
 80005ee:	f003 030f 	and.w	r3, r3, #15
 80005f2:	3b04      	subs	r3, #4
 80005f4:	0112      	lsls	r2, r2, #4
 80005f6:	b2d2      	uxtb	r2, r2
 80005f8:	440b      	add	r3, r1
 80005fa:	761a      	strb	r2, [r3, #24]
}
 80005fc:	bf00      	nop
 80005fe:	370c      	adds	r7, #12
 8000600:	46bd      	mov	sp, r7
 8000602:	bc80      	pop	{r7}
 8000604:	4770      	bx	lr
 8000606:	bf00      	nop
 8000608:	e000e100 	.word	0xe000e100
 800060c:	e000ed00 	.word	0xe000ed00

08000610 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000610:	b480      	push	{r7}
 8000612:	b089      	sub	sp, #36	; 0x24
 8000614:	af00      	add	r7, sp, #0
 8000616:	60f8      	str	r0, [r7, #12]
 8000618:	60b9      	str	r1, [r7, #8]
 800061a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800061c:	68fb      	ldr	r3, [r7, #12]
 800061e:	f003 0307 	and.w	r3, r3, #7
 8000622:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000624:	69fb      	ldr	r3, [r7, #28]
 8000626:	f1c3 0307 	rsb	r3, r3, #7
 800062a:	2b04      	cmp	r3, #4
 800062c:	bf28      	it	cs
 800062e:	2304      	movcs	r3, #4
 8000630:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000632:	69fb      	ldr	r3, [r7, #28]
 8000634:	3304      	adds	r3, #4
 8000636:	2b06      	cmp	r3, #6
 8000638:	d902      	bls.n	8000640 <NVIC_EncodePriority+0x30>
 800063a:	69fb      	ldr	r3, [r7, #28]
 800063c:	3b03      	subs	r3, #3
 800063e:	e000      	b.n	8000642 <NVIC_EncodePriority+0x32>
 8000640:	2300      	movs	r3, #0
 8000642:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000644:	f04f 32ff 	mov.w	r2, #4294967295
 8000648:	69bb      	ldr	r3, [r7, #24]
 800064a:	fa02 f303 	lsl.w	r3, r2, r3
 800064e:	43da      	mvns	r2, r3
 8000650:	68bb      	ldr	r3, [r7, #8]
 8000652:	401a      	ands	r2, r3
 8000654:	697b      	ldr	r3, [r7, #20]
 8000656:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000658:	f04f 31ff 	mov.w	r1, #4294967295
 800065c:	697b      	ldr	r3, [r7, #20]
 800065e:	fa01 f303 	lsl.w	r3, r1, r3
 8000662:	43d9      	mvns	r1, r3
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000668:	4313      	orrs	r3, r2
         );
}
 800066a:	4618      	mov	r0, r3
 800066c:	3724      	adds	r7, #36	; 0x24
 800066e:	46bd      	mov	sp, r7
 8000670:	bc80      	pop	{r7}
 8000672:	4770      	bx	lr

08000674 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b082      	sub	sp, #8
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	3b01      	subs	r3, #1
 8000680:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000684:	d301      	bcc.n	800068a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000686:	2301      	movs	r3, #1
 8000688:	e00f      	b.n	80006aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800068a:	4a0a      	ldr	r2, [pc, #40]	; (80006b4 <SysTick_Config+0x40>)
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	3b01      	subs	r3, #1
 8000690:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000692:	210f      	movs	r1, #15
 8000694:	f04f 30ff 	mov.w	r0, #4294967295
 8000698:	f7ff ff90 	bl	80005bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800069c:	4b05      	ldr	r3, [pc, #20]	; (80006b4 <SysTick_Config+0x40>)
 800069e:	2200      	movs	r2, #0
 80006a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80006a2:	4b04      	ldr	r3, [pc, #16]	; (80006b4 <SysTick_Config+0x40>)
 80006a4:	2207      	movs	r2, #7
 80006a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80006a8:	2300      	movs	r3, #0
}
 80006aa:	4618      	mov	r0, r3
 80006ac:	3708      	adds	r7, #8
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	e000e010 	.word	0xe000e010

080006b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b082      	sub	sp, #8
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80006c0:	6878      	ldr	r0, [r7, #4]
 80006c2:	f7ff ff49 	bl	8000558 <__NVIC_SetPriorityGrouping>
}
 80006c6:	bf00      	nop
 80006c8:	3708      	adds	r7, #8
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}

080006ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80006ce:	b580      	push	{r7, lr}
 80006d0:	b086      	sub	sp, #24
 80006d2:	af00      	add	r7, sp, #0
 80006d4:	4603      	mov	r3, r0
 80006d6:	60b9      	str	r1, [r7, #8]
 80006d8:	607a      	str	r2, [r7, #4]
 80006da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80006dc:	2300      	movs	r3, #0
 80006de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80006e0:	f7ff ff5e 	bl	80005a0 <__NVIC_GetPriorityGrouping>
 80006e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80006e6:	687a      	ldr	r2, [r7, #4]
 80006e8:	68b9      	ldr	r1, [r7, #8]
 80006ea:	6978      	ldr	r0, [r7, #20]
 80006ec:	f7ff ff90 	bl	8000610 <NVIC_EncodePriority>
 80006f0:	4602      	mov	r2, r0
 80006f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80006f6:	4611      	mov	r1, r2
 80006f8:	4618      	mov	r0, r3
 80006fa:	f7ff ff5f 	bl	80005bc <__NVIC_SetPriority>
}
 80006fe:	bf00      	nop
 8000700:	3718      	adds	r7, #24
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}

08000706 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000706:	b580      	push	{r7, lr}
 8000708:	b082      	sub	sp, #8
 800070a:	af00      	add	r7, sp, #0
 800070c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800070e:	6878      	ldr	r0, [r7, #4]
 8000710:	f7ff ffb0 	bl	8000674 <SysTick_Config>
 8000714:	4603      	mov	r3, r0
}
 8000716:	4618      	mov	r0, r3
 8000718:	3708      	adds	r7, #8
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}
	...

08000720 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000720:	b480      	push	{r7}
 8000722:	b08b      	sub	sp, #44	; 0x2c
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
 8000728:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800072a:	2300      	movs	r3, #0
 800072c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800072e:	2300      	movs	r3, #0
 8000730:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000732:	e169      	b.n	8000a08 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000734:	2201      	movs	r2, #1
 8000736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000738:	fa02 f303 	lsl.w	r3, r2, r3
 800073c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800073e:	683b      	ldr	r3, [r7, #0]
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	69fa      	ldr	r2, [r7, #28]
 8000744:	4013      	ands	r3, r2
 8000746:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000748:	69ba      	ldr	r2, [r7, #24]
 800074a:	69fb      	ldr	r3, [r7, #28]
 800074c:	429a      	cmp	r2, r3
 800074e:	f040 8158 	bne.w	8000a02 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000752:	683b      	ldr	r3, [r7, #0]
 8000754:	685b      	ldr	r3, [r3, #4]
 8000756:	4a9a      	ldr	r2, [pc, #616]	; (80009c0 <HAL_GPIO_Init+0x2a0>)
 8000758:	4293      	cmp	r3, r2
 800075a:	d05e      	beq.n	800081a <HAL_GPIO_Init+0xfa>
 800075c:	4a98      	ldr	r2, [pc, #608]	; (80009c0 <HAL_GPIO_Init+0x2a0>)
 800075e:	4293      	cmp	r3, r2
 8000760:	d875      	bhi.n	800084e <HAL_GPIO_Init+0x12e>
 8000762:	4a98      	ldr	r2, [pc, #608]	; (80009c4 <HAL_GPIO_Init+0x2a4>)
 8000764:	4293      	cmp	r3, r2
 8000766:	d058      	beq.n	800081a <HAL_GPIO_Init+0xfa>
 8000768:	4a96      	ldr	r2, [pc, #600]	; (80009c4 <HAL_GPIO_Init+0x2a4>)
 800076a:	4293      	cmp	r3, r2
 800076c:	d86f      	bhi.n	800084e <HAL_GPIO_Init+0x12e>
 800076e:	4a96      	ldr	r2, [pc, #600]	; (80009c8 <HAL_GPIO_Init+0x2a8>)
 8000770:	4293      	cmp	r3, r2
 8000772:	d052      	beq.n	800081a <HAL_GPIO_Init+0xfa>
 8000774:	4a94      	ldr	r2, [pc, #592]	; (80009c8 <HAL_GPIO_Init+0x2a8>)
 8000776:	4293      	cmp	r3, r2
 8000778:	d869      	bhi.n	800084e <HAL_GPIO_Init+0x12e>
 800077a:	4a94      	ldr	r2, [pc, #592]	; (80009cc <HAL_GPIO_Init+0x2ac>)
 800077c:	4293      	cmp	r3, r2
 800077e:	d04c      	beq.n	800081a <HAL_GPIO_Init+0xfa>
 8000780:	4a92      	ldr	r2, [pc, #584]	; (80009cc <HAL_GPIO_Init+0x2ac>)
 8000782:	4293      	cmp	r3, r2
 8000784:	d863      	bhi.n	800084e <HAL_GPIO_Init+0x12e>
 8000786:	4a92      	ldr	r2, [pc, #584]	; (80009d0 <HAL_GPIO_Init+0x2b0>)
 8000788:	4293      	cmp	r3, r2
 800078a:	d046      	beq.n	800081a <HAL_GPIO_Init+0xfa>
 800078c:	4a90      	ldr	r2, [pc, #576]	; (80009d0 <HAL_GPIO_Init+0x2b0>)
 800078e:	4293      	cmp	r3, r2
 8000790:	d85d      	bhi.n	800084e <HAL_GPIO_Init+0x12e>
 8000792:	2b12      	cmp	r3, #18
 8000794:	d82a      	bhi.n	80007ec <HAL_GPIO_Init+0xcc>
 8000796:	2b12      	cmp	r3, #18
 8000798:	d859      	bhi.n	800084e <HAL_GPIO_Init+0x12e>
 800079a:	a201      	add	r2, pc, #4	; (adr r2, 80007a0 <HAL_GPIO_Init+0x80>)
 800079c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007a0:	0800081b 	.word	0x0800081b
 80007a4:	080007f5 	.word	0x080007f5
 80007a8:	08000807 	.word	0x08000807
 80007ac:	08000849 	.word	0x08000849
 80007b0:	0800084f 	.word	0x0800084f
 80007b4:	0800084f 	.word	0x0800084f
 80007b8:	0800084f 	.word	0x0800084f
 80007bc:	0800084f 	.word	0x0800084f
 80007c0:	0800084f 	.word	0x0800084f
 80007c4:	0800084f 	.word	0x0800084f
 80007c8:	0800084f 	.word	0x0800084f
 80007cc:	0800084f 	.word	0x0800084f
 80007d0:	0800084f 	.word	0x0800084f
 80007d4:	0800084f 	.word	0x0800084f
 80007d8:	0800084f 	.word	0x0800084f
 80007dc:	0800084f 	.word	0x0800084f
 80007e0:	0800084f 	.word	0x0800084f
 80007e4:	080007fd 	.word	0x080007fd
 80007e8:	08000811 	.word	0x08000811
 80007ec:	4a79      	ldr	r2, [pc, #484]	; (80009d4 <HAL_GPIO_Init+0x2b4>)
 80007ee:	4293      	cmp	r3, r2
 80007f0:	d013      	beq.n	800081a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80007f2:	e02c      	b.n	800084e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80007f4:	683b      	ldr	r3, [r7, #0]
 80007f6:	68db      	ldr	r3, [r3, #12]
 80007f8:	623b      	str	r3, [r7, #32]
          break;
 80007fa:	e029      	b.n	8000850 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80007fc:	683b      	ldr	r3, [r7, #0]
 80007fe:	68db      	ldr	r3, [r3, #12]
 8000800:	3304      	adds	r3, #4
 8000802:	623b      	str	r3, [r7, #32]
          break;
 8000804:	e024      	b.n	8000850 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000806:	683b      	ldr	r3, [r7, #0]
 8000808:	68db      	ldr	r3, [r3, #12]
 800080a:	3308      	adds	r3, #8
 800080c:	623b      	str	r3, [r7, #32]
          break;
 800080e:	e01f      	b.n	8000850 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000810:	683b      	ldr	r3, [r7, #0]
 8000812:	68db      	ldr	r3, [r3, #12]
 8000814:	330c      	adds	r3, #12
 8000816:	623b      	str	r3, [r7, #32]
          break;
 8000818:	e01a      	b.n	8000850 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800081a:	683b      	ldr	r3, [r7, #0]
 800081c:	689b      	ldr	r3, [r3, #8]
 800081e:	2b00      	cmp	r3, #0
 8000820:	d102      	bne.n	8000828 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000822:	2304      	movs	r3, #4
 8000824:	623b      	str	r3, [r7, #32]
          break;
 8000826:	e013      	b.n	8000850 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000828:	683b      	ldr	r3, [r7, #0]
 800082a:	689b      	ldr	r3, [r3, #8]
 800082c:	2b01      	cmp	r3, #1
 800082e:	d105      	bne.n	800083c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000830:	2308      	movs	r3, #8
 8000832:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	69fa      	ldr	r2, [r7, #28]
 8000838:	611a      	str	r2, [r3, #16]
          break;
 800083a:	e009      	b.n	8000850 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800083c:	2308      	movs	r3, #8
 800083e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	69fa      	ldr	r2, [r7, #28]
 8000844:	615a      	str	r2, [r3, #20]
          break;
 8000846:	e003      	b.n	8000850 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000848:	2300      	movs	r3, #0
 800084a:	623b      	str	r3, [r7, #32]
          break;
 800084c:	e000      	b.n	8000850 <HAL_GPIO_Init+0x130>
          break;
 800084e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000850:	69bb      	ldr	r3, [r7, #24]
 8000852:	2bff      	cmp	r3, #255	; 0xff
 8000854:	d801      	bhi.n	800085a <HAL_GPIO_Init+0x13a>
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	e001      	b.n	800085e <HAL_GPIO_Init+0x13e>
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	3304      	adds	r3, #4
 800085e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000860:	69bb      	ldr	r3, [r7, #24]
 8000862:	2bff      	cmp	r3, #255	; 0xff
 8000864:	d802      	bhi.n	800086c <HAL_GPIO_Init+0x14c>
 8000866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000868:	009b      	lsls	r3, r3, #2
 800086a:	e002      	b.n	8000872 <HAL_GPIO_Init+0x152>
 800086c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800086e:	3b08      	subs	r3, #8
 8000870:	009b      	lsls	r3, r3, #2
 8000872:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000874:	697b      	ldr	r3, [r7, #20]
 8000876:	681a      	ldr	r2, [r3, #0]
 8000878:	210f      	movs	r1, #15
 800087a:	693b      	ldr	r3, [r7, #16]
 800087c:	fa01 f303 	lsl.w	r3, r1, r3
 8000880:	43db      	mvns	r3, r3
 8000882:	401a      	ands	r2, r3
 8000884:	6a39      	ldr	r1, [r7, #32]
 8000886:	693b      	ldr	r3, [r7, #16]
 8000888:	fa01 f303 	lsl.w	r3, r1, r3
 800088c:	431a      	orrs	r2, r3
 800088e:	697b      	ldr	r3, [r7, #20]
 8000890:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000892:	683b      	ldr	r3, [r7, #0]
 8000894:	685b      	ldr	r3, [r3, #4]
 8000896:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800089a:	2b00      	cmp	r3, #0
 800089c:	f000 80b1 	beq.w	8000a02 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80008a0:	4b4d      	ldr	r3, [pc, #308]	; (80009d8 <HAL_GPIO_Init+0x2b8>)
 80008a2:	699b      	ldr	r3, [r3, #24]
 80008a4:	4a4c      	ldr	r2, [pc, #304]	; (80009d8 <HAL_GPIO_Init+0x2b8>)
 80008a6:	f043 0301 	orr.w	r3, r3, #1
 80008aa:	6193      	str	r3, [r2, #24]
 80008ac:	4b4a      	ldr	r3, [pc, #296]	; (80009d8 <HAL_GPIO_Init+0x2b8>)
 80008ae:	699b      	ldr	r3, [r3, #24]
 80008b0:	f003 0301 	and.w	r3, r3, #1
 80008b4:	60bb      	str	r3, [r7, #8]
 80008b6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80008b8:	4a48      	ldr	r2, [pc, #288]	; (80009dc <HAL_GPIO_Init+0x2bc>)
 80008ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008bc:	089b      	lsrs	r3, r3, #2
 80008be:	3302      	adds	r3, #2
 80008c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008c4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80008c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008c8:	f003 0303 	and.w	r3, r3, #3
 80008cc:	009b      	lsls	r3, r3, #2
 80008ce:	220f      	movs	r2, #15
 80008d0:	fa02 f303 	lsl.w	r3, r2, r3
 80008d4:	43db      	mvns	r3, r3
 80008d6:	68fa      	ldr	r2, [r7, #12]
 80008d8:	4013      	ands	r3, r2
 80008da:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	4a40      	ldr	r2, [pc, #256]	; (80009e0 <HAL_GPIO_Init+0x2c0>)
 80008e0:	4293      	cmp	r3, r2
 80008e2:	d013      	beq.n	800090c <HAL_GPIO_Init+0x1ec>
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	4a3f      	ldr	r2, [pc, #252]	; (80009e4 <HAL_GPIO_Init+0x2c4>)
 80008e8:	4293      	cmp	r3, r2
 80008ea:	d00d      	beq.n	8000908 <HAL_GPIO_Init+0x1e8>
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	4a3e      	ldr	r2, [pc, #248]	; (80009e8 <HAL_GPIO_Init+0x2c8>)
 80008f0:	4293      	cmp	r3, r2
 80008f2:	d007      	beq.n	8000904 <HAL_GPIO_Init+0x1e4>
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	4a3d      	ldr	r2, [pc, #244]	; (80009ec <HAL_GPIO_Init+0x2cc>)
 80008f8:	4293      	cmp	r3, r2
 80008fa:	d101      	bne.n	8000900 <HAL_GPIO_Init+0x1e0>
 80008fc:	2303      	movs	r3, #3
 80008fe:	e006      	b.n	800090e <HAL_GPIO_Init+0x1ee>
 8000900:	2304      	movs	r3, #4
 8000902:	e004      	b.n	800090e <HAL_GPIO_Init+0x1ee>
 8000904:	2302      	movs	r3, #2
 8000906:	e002      	b.n	800090e <HAL_GPIO_Init+0x1ee>
 8000908:	2301      	movs	r3, #1
 800090a:	e000      	b.n	800090e <HAL_GPIO_Init+0x1ee>
 800090c:	2300      	movs	r3, #0
 800090e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000910:	f002 0203 	and.w	r2, r2, #3
 8000914:	0092      	lsls	r2, r2, #2
 8000916:	4093      	lsls	r3, r2
 8000918:	68fa      	ldr	r2, [r7, #12]
 800091a:	4313      	orrs	r3, r2
 800091c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800091e:	492f      	ldr	r1, [pc, #188]	; (80009dc <HAL_GPIO_Init+0x2bc>)
 8000920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000922:	089b      	lsrs	r3, r3, #2
 8000924:	3302      	adds	r3, #2
 8000926:	68fa      	ldr	r2, [r7, #12]
 8000928:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800092c:	683b      	ldr	r3, [r7, #0]
 800092e:	685b      	ldr	r3, [r3, #4]
 8000930:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000934:	2b00      	cmp	r3, #0
 8000936:	d006      	beq.n	8000946 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000938:	4b2d      	ldr	r3, [pc, #180]	; (80009f0 <HAL_GPIO_Init+0x2d0>)
 800093a:	689a      	ldr	r2, [r3, #8]
 800093c:	492c      	ldr	r1, [pc, #176]	; (80009f0 <HAL_GPIO_Init+0x2d0>)
 800093e:	69bb      	ldr	r3, [r7, #24]
 8000940:	4313      	orrs	r3, r2
 8000942:	608b      	str	r3, [r1, #8]
 8000944:	e006      	b.n	8000954 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000946:	4b2a      	ldr	r3, [pc, #168]	; (80009f0 <HAL_GPIO_Init+0x2d0>)
 8000948:	689a      	ldr	r2, [r3, #8]
 800094a:	69bb      	ldr	r3, [r7, #24]
 800094c:	43db      	mvns	r3, r3
 800094e:	4928      	ldr	r1, [pc, #160]	; (80009f0 <HAL_GPIO_Init+0x2d0>)
 8000950:	4013      	ands	r3, r2
 8000952:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000954:	683b      	ldr	r3, [r7, #0]
 8000956:	685b      	ldr	r3, [r3, #4]
 8000958:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800095c:	2b00      	cmp	r3, #0
 800095e:	d006      	beq.n	800096e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000960:	4b23      	ldr	r3, [pc, #140]	; (80009f0 <HAL_GPIO_Init+0x2d0>)
 8000962:	68da      	ldr	r2, [r3, #12]
 8000964:	4922      	ldr	r1, [pc, #136]	; (80009f0 <HAL_GPIO_Init+0x2d0>)
 8000966:	69bb      	ldr	r3, [r7, #24]
 8000968:	4313      	orrs	r3, r2
 800096a:	60cb      	str	r3, [r1, #12]
 800096c:	e006      	b.n	800097c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800096e:	4b20      	ldr	r3, [pc, #128]	; (80009f0 <HAL_GPIO_Init+0x2d0>)
 8000970:	68da      	ldr	r2, [r3, #12]
 8000972:	69bb      	ldr	r3, [r7, #24]
 8000974:	43db      	mvns	r3, r3
 8000976:	491e      	ldr	r1, [pc, #120]	; (80009f0 <HAL_GPIO_Init+0x2d0>)
 8000978:	4013      	ands	r3, r2
 800097a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800097c:	683b      	ldr	r3, [r7, #0]
 800097e:	685b      	ldr	r3, [r3, #4]
 8000980:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000984:	2b00      	cmp	r3, #0
 8000986:	d006      	beq.n	8000996 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000988:	4b19      	ldr	r3, [pc, #100]	; (80009f0 <HAL_GPIO_Init+0x2d0>)
 800098a:	685a      	ldr	r2, [r3, #4]
 800098c:	4918      	ldr	r1, [pc, #96]	; (80009f0 <HAL_GPIO_Init+0x2d0>)
 800098e:	69bb      	ldr	r3, [r7, #24]
 8000990:	4313      	orrs	r3, r2
 8000992:	604b      	str	r3, [r1, #4]
 8000994:	e006      	b.n	80009a4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000996:	4b16      	ldr	r3, [pc, #88]	; (80009f0 <HAL_GPIO_Init+0x2d0>)
 8000998:	685a      	ldr	r2, [r3, #4]
 800099a:	69bb      	ldr	r3, [r7, #24]
 800099c:	43db      	mvns	r3, r3
 800099e:	4914      	ldr	r1, [pc, #80]	; (80009f0 <HAL_GPIO_Init+0x2d0>)
 80009a0:	4013      	ands	r3, r2
 80009a2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80009a4:	683b      	ldr	r3, [r7, #0]
 80009a6:	685b      	ldr	r3, [r3, #4]
 80009a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d021      	beq.n	80009f4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80009b0:	4b0f      	ldr	r3, [pc, #60]	; (80009f0 <HAL_GPIO_Init+0x2d0>)
 80009b2:	681a      	ldr	r2, [r3, #0]
 80009b4:	490e      	ldr	r1, [pc, #56]	; (80009f0 <HAL_GPIO_Init+0x2d0>)
 80009b6:	69bb      	ldr	r3, [r7, #24]
 80009b8:	4313      	orrs	r3, r2
 80009ba:	600b      	str	r3, [r1, #0]
 80009bc:	e021      	b.n	8000a02 <HAL_GPIO_Init+0x2e2>
 80009be:	bf00      	nop
 80009c0:	10320000 	.word	0x10320000
 80009c4:	10310000 	.word	0x10310000
 80009c8:	10220000 	.word	0x10220000
 80009cc:	10210000 	.word	0x10210000
 80009d0:	10120000 	.word	0x10120000
 80009d4:	10110000 	.word	0x10110000
 80009d8:	40021000 	.word	0x40021000
 80009dc:	40010000 	.word	0x40010000
 80009e0:	40010800 	.word	0x40010800
 80009e4:	40010c00 	.word	0x40010c00
 80009e8:	40011000 	.word	0x40011000
 80009ec:	40011400 	.word	0x40011400
 80009f0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80009f4:	4b0b      	ldr	r3, [pc, #44]	; (8000a24 <HAL_GPIO_Init+0x304>)
 80009f6:	681a      	ldr	r2, [r3, #0]
 80009f8:	69bb      	ldr	r3, [r7, #24]
 80009fa:	43db      	mvns	r3, r3
 80009fc:	4909      	ldr	r1, [pc, #36]	; (8000a24 <HAL_GPIO_Init+0x304>)
 80009fe:	4013      	ands	r3, r2
 8000a00:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a04:	3301      	adds	r3, #1
 8000a06:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a08:	683b      	ldr	r3, [r7, #0]
 8000a0a:	681a      	ldr	r2, [r3, #0]
 8000a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a0e:	fa22 f303 	lsr.w	r3, r2, r3
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	f47f ae8e 	bne.w	8000734 <HAL_GPIO_Init+0x14>
  }
}
 8000a18:	bf00      	nop
 8000a1a:	bf00      	nop
 8000a1c:	372c      	adds	r7, #44	; 0x2c
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bc80      	pop	{r7}
 8000a22:	4770      	bx	lr
 8000a24:	40010400 	.word	0x40010400

08000a28 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	b083      	sub	sp, #12
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
 8000a30:	460b      	mov	r3, r1
 8000a32:	807b      	strh	r3, [r7, #2]
 8000a34:	4613      	mov	r3, r2
 8000a36:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000a38:	787b      	ldrb	r3, [r7, #1]
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d003      	beq.n	8000a46 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000a3e:	887a      	ldrh	r2, [r7, #2]
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000a44:	e003      	b.n	8000a4e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000a46:	887b      	ldrh	r3, [r7, #2]
 8000a48:	041a      	lsls	r2, r3, #16
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	611a      	str	r2, [r3, #16]
}
 8000a4e:	bf00      	nop
 8000a50:	370c      	adds	r7, #12
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bc80      	pop	{r7}
 8000a56:	4770      	bx	lr

08000a58 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b086      	sub	sp, #24
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d101      	bne.n	8000a6a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000a66:	2301      	movs	r3, #1
 8000a68:	e272      	b.n	8000f50 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	f003 0301 	and.w	r3, r3, #1
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	f000 8087 	beq.w	8000b86 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000a78:	4b92      	ldr	r3, [pc, #584]	; (8000cc4 <HAL_RCC_OscConfig+0x26c>)
 8000a7a:	685b      	ldr	r3, [r3, #4]
 8000a7c:	f003 030c 	and.w	r3, r3, #12
 8000a80:	2b04      	cmp	r3, #4
 8000a82:	d00c      	beq.n	8000a9e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000a84:	4b8f      	ldr	r3, [pc, #572]	; (8000cc4 <HAL_RCC_OscConfig+0x26c>)
 8000a86:	685b      	ldr	r3, [r3, #4]
 8000a88:	f003 030c 	and.w	r3, r3, #12
 8000a8c:	2b08      	cmp	r3, #8
 8000a8e:	d112      	bne.n	8000ab6 <HAL_RCC_OscConfig+0x5e>
 8000a90:	4b8c      	ldr	r3, [pc, #560]	; (8000cc4 <HAL_RCC_OscConfig+0x26c>)
 8000a92:	685b      	ldr	r3, [r3, #4]
 8000a94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000a9c:	d10b      	bne.n	8000ab6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000a9e:	4b89      	ldr	r3, [pc, #548]	; (8000cc4 <HAL_RCC_OscConfig+0x26c>)
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d06c      	beq.n	8000b84 <HAL_RCC_OscConfig+0x12c>
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	685b      	ldr	r3, [r3, #4]
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d168      	bne.n	8000b84 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000ab2:	2301      	movs	r3, #1
 8000ab4:	e24c      	b.n	8000f50 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	685b      	ldr	r3, [r3, #4]
 8000aba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000abe:	d106      	bne.n	8000ace <HAL_RCC_OscConfig+0x76>
 8000ac0:	4b80      	ldr	r3, [pc, #512]	; (8000cc4 <HAL_RCC_OscConfig+0x26c>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	4a7f      	ldr	r2, [pc, #508]	; (8000cc4 <HAL_RCC_OscConfig+0x26c>)
 8000ac6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000aca:	6013      	str	r3, [r2, #0]
 8000acc:	e02e      	b.n	8000b2c <HAL_RCC_OscConfig+0xd4>
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	685b      	ldr	r3, [r3, #4]
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d10c      	bne.n	8000af0 <HAL_RCC_OscConfig+0x98>
 8000ad6:	4b7b      	ldr	r3, [pc, #492]	; (8000cc4 <HAL_RCC_OscConfig+0x26c>)
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	4a7a      	ldr	r2, [pc, #488]	; (8000cc4 <HAL_RCC_OscConfig+0x26c>)
 8000adc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ae0:	6013      	str	r3, [r2, #0]
 8000ae2:	4b78      	ldr	r3, [pc, #480]	; (8000cc4 <HAL_RCC_OscConfig+0x26c>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	4a77      	ldr	r2, [pc, #476]	; (8000cc4 <HAL_RCC_OscConfig+0x26c>)
 8000ae8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000aec:	6013      	str	r3, [r2, #0]
 8000aee:	e01d      	b.n	8000b2c <HAL_RCC_OscConfig+0xd4>
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	685b      	ldr	r3, [r3, #4]
 8000af4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000af8:	d10c      	bne.n	8000b14 <HAL_RCC_OscConfig+0xbc>
 8000afa:	4b72      	ldr	r3, [pc, #456]	; (8000cc4 <HAL_RCC_OscConfig+0x26c>)
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	4a71      	ldr	r2, [pc, #452]	; (8000cc4 <HAL_RCC_OscConfig+0x26c>)
 8000b00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b04:	6013      	str	r3, [r2, #0]
 8000b06:	4b6f      	ldr	r3, [pc, #444]	; (8000cc4 <HAL_RCC_OscConfig+0x26c>)
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	4a6e      	ldr	r2, [pc, #440]	; (8000cc4 <HAL_RCC_OscConfig+0x26c>)
 8000b0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b10:	6013      	str	r3, [r2, #0]
 8000b12:	e00b      	b.n	8000b2c <HAL_RCC_OscConfig+0xd4>
 8000b14:	4b6b      	ldr	r3, [pc, #428]	; (8000cc4 <HAL_RCC_OscConfig+0x26c>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	4a6a      	ldr	r2, [pc, #424]	; (8000cc4 <HAL_RCC_OscConfig+0x26c>)
 8000b1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000b1e:	6013      	str	r3, [r2, #0]
 8000b20:	4b68      	ldr	r3, [pc, #416]	; (8000cc4 <HAL_RCC_OscConfig+0x26c>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	4a67      	ldr	r2, [pc, #412]	; (8000cc4 <HAL_RCC_OscConfig+0x26c>)
 8000b26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b2a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	685b      	ldr	r3, [r3, #4]
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d013      	beq.n	8000b5c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b34:	f7ff fce2 	bl	80004fc <HAL_GetTick>
 8000b38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000b3a:	e008      	b.n	8000b4e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000b3c:	f7ff fcde 	bl	80004fc <HAL_GetTick>
 8000b40:	4602      	mov	r2, r0
 8000b42:	693b      	ldr	r3, [r7, #16]
 8000b44:	1ad3      	subs	r3, r2, r3
 8000b46:	2b64      	cmp	r3, #100	; 0x64
 8000b48:	d901      	bls.n	8000b4e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000b4a:	2303      	movs	r3, #3
 8000b4c:	e200      	b.n	8000f50 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000b4e:	4b5d      	ldr	r3, [pc, #372]	; (8000cc4 <HAL_RCC_OscConfig+0x26c>)
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d0f0      	beq.n	8000b3c <HAL_RCC_OscConfig+0xe4>
 8000b5a:	e014      	b.n	8000b86 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b5c:	f7ff fcce 	bl	80004fc <HAL_GetTick>
 8000b60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000b62:	e008      	b.n	8000b76 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000b64:	f7ff fcca 	bl	80004fc <HAL_GetTick>
 8000b68:	4602      	mov	r2, r0
 8000b6a:	693b      	ldr	r3, [r7, #16]
 8000b6c:	1ad3      	subs	r3, r2, r3
 8000b6e:	2b64      	cmp	r3, #100	; 0x64
 8000b70:	d901      	bls.n	8000b76 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000b72:	2303      	movs	r3, #3
 8000b74:	e1ec      	b.n	8000f50 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000b76:	4b53      	ldr	r3, [pc, #332]	; (8000cc4 <HAL_RCC_OscConfig+0x26c>)
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d1f0      	bne.n	8000b64 <HAL_RCC_OscConfig+0x10c>
 8000b82:	e000      	b.n	8000b86 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	f003 0302 	and.w	r3, r3, #2
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d063      	beq.n	8000c5a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000b92:	4b4c      	ldr	r3, [pc, #304]	; (8000cc4 <HAL_RCC_OscConfig+0x26c>)
 8000b94:	685b      	ldr	r3, [r3, #4]
 8000b96:	f003 030c 	and.w	r3, r3, #12
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d00b      	beq.n	8000bb6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000b9e:	4b49      	ldr	r3, [pc, #292]	; (8000cc4 <HAL_RCC_OscConfig+0x26c>)
 8000ba0:	685b      	ldr	r3, [r3, #4]
 8000ba2:	f003 030c 	and.w	r3, r3, #12
 8000ba6:	2b08      	cmp	r3, #8
 8000ba8:	d11c      	bne.n	8000be4 <HAL_RCC_OscConfig+0x18c>
 8000baa:	4b46      	ldr	r3, [pc, #280]	; (8000cc4 <HAL_RCC_OscConfig+0x26c>)
 8000bac:	685b      	ldr	r3, [r3, #4]
 8000bae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d116      	bne.n	8000be4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000bb6:	4b43      	ldr	r3, [pc, #268]	; (8000cc4 <HAL_RCC_OscConfig+0x26c>)
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	f003 0302 	and.w	r3, r3, #2
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d005      	beq.n	8000bce <HAL_RCC_OscConfig+0x176>
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	691b      	ldr	r3, [r3, #16]
 8000bc6:	2b01      	cmp	r3, #1
 8000bc8:	d001      	beq.n	8000bce <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000bca:	2301      	movs	r3, #1
 8000bcc:	e1c0      	b.n	8000f50 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000bce:	4b3d      	ldr	r3, [pc, #244]	; (8000cc4 <HAL_RCC_OscConfig+0x26c>)
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	695b      	ldr	r3, [r3, #20]
 8000bda:	00db      	lsls	r3, r3, #3
 8000bdc:	4939      	ldr	r1, [pc, #228]	; (8000cc4 <HAL_RCC_OscConfig+0x26c>)
 8000bde:	4313      	orrs	r3, r2
 8000be0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000be2:	e03a      	b.n	8000c5a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	691b      	ldr	r3, [r3, #16]
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d020      	beq.n	8000c2e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000bec:	4b36      	ldr	r3, [pc, #216]	; (8000cc8 <HAL_RCC_OscConfig+0x270>)
 8000bee:	2201      	movs	r2, #1
 8000bf0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000bf2:	f7ff fc83 	bl	80004fc <HAL_GetTick>
 8000bf6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000bf8:	e008      	b.n	8000c0c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000bfa:	f7ff fc7f 	bl	80004fc <HAL_GetTick>
 8000bfe:	4602      	mov	r2, r0
 8000c00:	693b      	ldr	r3, [r7, #16]
 8000c02:	1ad3      	subs	r3, r2, r3
 8000c04:	2b02      	cmp	r3, #2
 8000c06:	d901      	bls.n	8000c0c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000c08:	2303      	movs	r3, #3
 8000c0a:	e1a1      	b.n	8000f50 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c0c:	4b2d      	ldr	r3, [pc, #180]	; (8000cc4 <HAL_RCC_OscConfig+0x26c>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	f003 0302 	and.w	r3, r3, #2
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d0f0      	beq.n	8000bfa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c18:	4b2a      	ldr	r3, [pc, #168]	; (8000cc4 <HAL_RCC_OscConfig+0x26c>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	695b      	ldr	r3, [r3, #20]
 8000c24:	00db      	lsls	r3, r3, #3
 8000c26:	4927      	ldr	r1, [pc, #156]	; (8000cc4 <HAL_RCC_OscConfig+0x26c>)
 8000c28:	4313      	orrs	r3, r2
 8000c2a:	600b      	str	r3, [r1, #0]
 8000c2c:	e015      	b.n	8000c5a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000c2e:	4b26      	ldr	r3, [pc, #152]	; (8000cc8 <HAL_RCC_OscConfig+0x270>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c34:	f7ff fc62 	bl	80004fc <HAL_GetTick>
 8000c38:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000c3a:	e008      	b.n	8000c4e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000c3c:	f7ff fc5e 	bl	80004fc <HAL_GetTick>
 8000c40:	4602      	mov	r2, r0
 8000c42:	693b      	ldr	r3, [r7, #16]
 8000c44:	1ad3      	subs	r3, r2, r3
 8000c46:	2b02      	cmp	r3, #2
 8000c48:	d901      	bls.n	8000c4e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000c4a:	2303      	movs	r3, #3
 8000c4c:	e180      	b.n	8000f50 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000c4e:	4b1d      	ldr	r3, [pc, #116]	; (8000cc4 <HAL_RCC_OscConfig+0x26c>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	f003 0302 	and.w	r3, r3, #2
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d1f0      	bne.n	8000c3c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	f003 0308 	and.w	r3, r3, #8
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d03a      	beq.n	8000cdc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	699b      	ldr	r3, [r3, #24]
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d019      	beq.n	8000ca2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000c6e:	4b17      	ldr	r3, [pc, #92]	; (8000ccc <HAL_RCC_OscConfig+0x274>)
 8000c70:	2201      	movs	r2, #1
 8000c72:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000c74:	f7ff fc42 	bl	80004fc <HAL_GetTick>
 8000c78:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000c7a:	e008      	b.n	8000c8e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000c7c:	f7ff fc3e 	bl	80004fc <HAL_GetTick>
 8000c80:	4602      	mov	r2, r0
 8000c82:	693b      	ldr	r3, [r7, #16]
 8000c84:	1ad3      	subs	r3, r2, r3
 8000c86:	2b02      	cmp	r3, #2
 8000c88:	d901      	bls.n	8000c8e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000c8a:	2303      	movs	r3, #3
 8000c8c:	e160      	b.n	8000f50 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000c8e:	4b0d      	ldr	r3, [pc, #52]	; (8000cc4 <HAL_RCC_OscConfig+0x26c>)
 8000c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c92:	f003 0302 	and.w	r3, r3, #2
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d0f0      	beq.n	8000c7c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000c9a:	2001      	movs	r0, #1
 8000c9c:	f000 fa9c 	bl	80011d8 <RCC_Delay>
 8000ca0:	e01c      	b.n	8000cdc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000ca2:	4b0a      	ldr	r3, [pc, #40]	; (8000ccc <HAL_RCC_OscConfig+0x274>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ca8:	f7ff fc28 	bl	80004fc <HAL_GetTick>
 8000cac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000cae:	e00f      	b.n	8000cd0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000cb0:	f7ff fc24 	bl	80004fc <HAL_GetTick>
 8000cb4:	4602      	mov	r2, r0
 8000cb6:	693b      	ldr	r3, [r7, #16]
 8000cb8:	1ad3      	subs	r3, r2, r3
 8000cba:	2b02      	cmp	r3, #2
 8000cbc:	d908      	bls.n	8000cd0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000cbe:	2303      	movs	r3, #3
 8000cc0:	e146      	b.n	8000f50 <HAL_RCC_OscConfig+0x4f8>
 8000cc2:	bf00      	nop
 8000cc4:	40021000 	.word	0x40021000
 8000cc8:	42420000 	.word	0x42420000
 8000ccc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000cd0:	4b92      	ldr	r3, [pc, #584]	; (8000f1c <HAL_RCC_OscConfig+0x4c4>)
 8000cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cd4:	f003 0302 	and.w	r3, r3, #2
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d1e9      	bne.n	8000cb0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	f003 0304 	and.w	r3, r3, #4
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	f000 80a6 	beq.w	8000e36 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000cea:	2300      	movs	r3, #0
 8000cec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000cee:	4b8b      	ldr	r3, [pc, #556]	; (8000f1c <HAL_RCC_OscConfig+0x4c4>)
 8000cf0:	69db      	ldr	r3, [r3, #28]
 8000cf2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d10d      	bne.n	8000d16 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000cfa:	4b88      	ldr	r3, [pc, #544]	; (8000f1c <HAL_RCC_OscConfig+0x4c4>)
 8000cfc:	69db      	ldr	r3, [r3, #28]
 8000cfe:	4a87      	ldr	r2, [pc, #540]	; (8000f1c <HAL_RCC_OscConfig+0x4c4>)
 8000d00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d04:	61d3      	str	r3, [r2, #28]
 8000d06:	4b85      	ldr	r3, [pc, #532]	; (8000f1c <HAL_RCC_OscConfig+0x4c4>)
 8000d08:	69db      	ldr	r3, [r3, #28]
 8000d0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d0e:	60bb      	str	r3, [r7, #8]
 8000d10:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000d12:	2301      	movs	r3, #1
 8000d14:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d16:	4b82      	ldr	r3, [pc, #520]	; (8000f20 <HAL_RCC_OscConfig+0x4c8>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d118      	bne.n	8000d54 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000d22:	4b7f      	ldr	r3, [pc, #508]	; (8000f20 <HAL_RCC_OscConfig+0x4c8>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	4a7e      	ldr	r2, [pc, #504]	; (8000f20 <HAL_RCC_OscConfig+0x4c8>)
 8000d28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d2c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000d2e:	f7ff fbe5 	bl	80004fc <HAL_GetTick>
 8000d32:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d34:	e008      	b.n	8000d48 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000d36:	f7ff fbe1 	bl	80004fc <HAL_GetTick>
 8000d3a:	4602      	mov	r2, r0
 8000d3c:	693b      	ldr	r3, [r7, #16]
 8000d3e:	1ad3      	subs	r3, r2, r3
 8000d40:	2b64      	cmp	r3, #100	; 0x64
 8000d42:	d901      	bls.n	8000d48 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000d44:	2303      	movs	r3, #3
 8000d46:	e103      	b.n	8000f50 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d48:	4b75      	ldr	r3, [pc, #468]	; (8000f20 <HAL_RCC_OscConfig+0x4c8>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d0f0      	beq.n	8000d36 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	68db      	ldr	r3, [r3, #12]
 8000d58:	2b01      	cmp	r3, #1
 8000d5a:	d106      	bne.n	8000d6a <HAL_RCC_OscConfig+0x312>
 8000d5c:	4b6f      	ldr	r3, [pc, #444]	; (8000f1c <HAL_RCC_OscConfig+0x4c4>)
 8000d5e:	6a1b      	ldr	r3, [r3, #32]
 8000d60:	4a6e      	ldr	r2, [pc, #440]	; (8000f1c <HAL_RCC_OscConfig+0x4c4>)
 8000d62:	f043 0301 	orr.w	r3, r3, #1
 8000d66:	6213      	str	r3, [r2, #32]
 8000d68:	e02d      	b.n	8000dc6 <HAL_RCC_OscConfig+0x36e>
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	68db      	ldr	r3, [r3, #12]
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d10c      	bne.n	8000d8c <HAL_RCC_OscConfig+0x334>
 8000d72:	4b6a      	ldr	r3, [pc, #424]	; (8000f1c <HAL_RCC_OscConfig+0x4c4>)
 8000d74:	6a1b      	ldr	r3, [r3, #32]
 8000d76:	4a69      	ldr	r2, [pc, #420]	; (8000f1c <HAL_RCC_OscConfig+0x4c4>)
 8000d78:	f023 0301 	bic.w	r3, r3, #1
 8000d7c:	6213      	str	r3, [r2, #32]
 8000d7e:	4b67      	ldr	r3, [pc, #412]	; (8000f1c <HAL_RCC_OscConfig+0x4c4>)
 8000d80:	6a1b      	ldr	r3, [r3, #32]
 8000d82:	4a66      	ldr	r2, [pc, #408]	; (8000f1c <HAL_RCC_OscConfig+0x4c4>)
 8000d84:	f023 0304 	bic.w	r3, r3, #4
 8000d88:	6213      	str	r3, [r2, #32]
 8000d8a:	e01c      	b.n	8000dc6 <HAL_RCC_OscConfig+0x36e>
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	68db      	ldr	r3, [r3, #12]
 8000d90:	2b05      	cmp	r3, #5
 8000d92:	d10c      	bne.n	8000dae <HAL_RCC_OscConfig+0x356>
 8000d94:	4b61      	ldr	r3, [pc, #388]	; (8000f1c <HAL_RCC_OscConfig+0x4c4>)
 8000d96:	6a1b      	ldr	r3, [r3, #32]
 8000d98:	4a60      	ldr	r2, [pc, #384]	; (8000f1c <HAL_RCC_OscConfig+0x4c4>)
 8000d9a:	f043 0304 	orr.w	r3, r3, #4
 8000d9e:	6213      	str	r3, [r2, #32]
 8000da0:	4b5e      	ldr	r3, [pc, #376]	; (8000f1c <HAL_RCC_OscConfig+0x4c4>)
 8000da2:	6a1b      	ldr	r3, [r3, #32]
 8000da4:	4a5d      	ldr	r2, [pc, #372]	; (8000f1c <HAL_RCC_OscConfig+0x4c4>)
 8000da6:	f043 0301 	orr.w	r3, r3, #1
 8000daa:	6213      	str	r3, [r2, #32]
 8000dac:	e00b      	b.n	8000dc6 <HAL_RCC_OscConfig+0x36e>
 8000dae:	4b5b      	ldr	r3, [pc, #364]	; (8000f1c <HAL_RCC_OscConfig+0x4c4>)
 8000db0:	6a1b      	ldr	r3, [r3, #32]
 8000db2:	4a5a      	ldr	r2, [pc, #360]	; (8000f1c <HAL_RCC_OscConfig+0x4c4>)
 8000db4:	f023 0301 	bic.w	r3, r3, #1
 8000db8:	6213      	str	r3, [r2, #32]
 8000dba:	4b58      	ldr	r3, [pc, #352]	; (8000f1c <HAL_RCC_OscConfig+0x4c4>)
 8000dbc:	6a1b      	ldr	r3, [r3, #32]
 8000dbe:	4a57      	ldr	r2, [pc, #348]	; (8000f1c <HAL_RCC_OscConfig+0x4c4>)
 8000dc0:	f023 0304 	bic.w	r3, r3, #4
 8000dc4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	68db      	ldr	r3, [r3, #12]
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d015      	beq.n	8000dfa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000dce:	f7ff fb95 	bl	80004fc <HAL_GetTick>
 8000dd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000dd4:	e00a      	b.n	8000dec <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000dd6:	f7ff fb91 	bl	80004fc <HAL_GetTick>
 8000dda:	4602      	mov	r2, r0
 8000ddc:	693b      	ldr	r3, [r7, #16]
 8000dde:	1ad3      	subs	r3, r2, r3
 8000de0:	f241 3288 	movw	r2, #5000	; 0x1388
 8000de4:	4293      	cmp	r3, r2
 8000de6:	d901      	bls.n	8000dec <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000de8:	2303      	movs	r3, #3
 8000dea:	e0b1      	b.n	8000f50 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000dec:	4b4b      	ldr	r3, [pc, #300]	; (8000f1c <HAL_RCC_OscConfig+0x4c4>)
 8000dee:	6a1b      	ldr	r3, [r3, #32]
 8000df0:	f003 0302 	and.w	r3, r3, #2
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d0ee      	beq.n	8000dd6 <HAL_RCC_OscConfig+0x37e>
 8000df8:	e014      	b.n	8000e24 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000dfa:	f7ff fb7f 	bl	80004fc <HAL_GetTick>
 8000dfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000e00:	e00a      	b.n	8000e18 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000e02:	f7ff fb7b 	bl	80004fc <HAL_GetTick>
 8000e06:	4602      	mov	r2, r0
 8000e08:	693b      	ldr	r3, [r7, #16]
 8000e0a:	1ad3      	subs	r3, r2, r3
 8000e0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e10:	4293      	cmp	r3, r2
 8000e12:	d901      	bls.n	8000e18 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000e14:	2303      	movs	r3, #3
 8000e16:	e09b      	b.n	8000f50 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000e18:	4b40      	ldr	r3, [pc, #256]	; (8000f1c <HAL_RCC_OscConfig+0x4c4>)
 8000e1a:	6a1b      	ldr	r3, [r3, #32]
 8000e1c:	f003 0302 	and.w	r3, r3, #2
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d1ee      	bne.n	8000e02 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000e24:	7dfb      	ldrb	r3, [r7, #23]
 8000e26:	2b01      	cmp	r3, #1
 8000e28:	d105      	bne.n	8000e36 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000e2a:	4b3c      	ldr	r3, [pc, #240]	; (8000f1c <HAL_RCC_OscConfig+0x4c4>)
 8000e2c:	69db      	ldr	r3, [r3, #28]
 8000e2e:	4a3b      	ldr	r2, [pc, #236]	; (8000f1c <HAL_RCC_OscConfig+0x4c4>)
 8000e30:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000e34:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	69db      	ldr	r3, [r3, #28]
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	f000 8087 	beq.w	8000f4e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000e40:	4b36      	ldr	r3, [pc, #216]	; (8000f1c <HAL_RCC_OscConfig+0x4c4>)
 8000e42:	685b      	ldr	r3, [r3, #4]
 8000e44:	f003 030c 	and.w	r3, r3, #12
 8000e48:	2b08      	cmp	r3, #8
 8000e4a:	d061      	beq.n	8000f10 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	69db      	ldr	r3, [r3, #28]
 8000e50:	2b02      	cmp	r3, #2
 8000e52:	d146      	bne.n	8000ee2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000e54:	4b33      	ldr	r3, [pc, #204]	; (8000f24 <HAL_RCC_OscConfig+0x4cc>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e5a:	f7ff fb4f 	bl	80004fc <HAL_GetTick>
 8000e5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000e60:	e008      	b.n	8000e74 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000e62:	f7ff fb4b 	bl	80004fc <HAL_GetTick>
 8000e66:	4602      	mov	r2, r0
 8000e68:	693b      	ldr	r3, [r7, #16]
 8000e6a:	1ad3      	subs	r3, r2, r3
 8000e6c:	2b02      	cmp	r3, #2
 8000e6e:	d901      	bls.n	8000e74 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8000e70:	2303      	movs	r3, #3
 8000e72:	e06d      	b.n	8000f50 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000e74:	4b29      	ldr	r3, [pc, #164]	; (8000f1c <HAL_RCC_OscConfig+0x4c4>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d1f0      	bne.n	8000e62 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	6a1b      	ldr	r3, [r3, #32]
 8000e84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e88:	d108      	bne.n	8000e9c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000e8a:	4b24      	ldr	r3, [pc, #144]	; (8000f1c <HAL_RCC_OscConfig+0x4c4>)
 8000e8c:	685b      	ldr	r3, [r3, #4]
 8000e8e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	689b      	ldr	r3, [r3, #8]
 8000e96:	4921      	ldr	r1, [pc, #132]	; (8000f1c <HAL_RCC_OscConfig+0x4c4>)
 8000e98:	4313      	orrs	r3, r2
 8000e9a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000e9c:	4b1f      	ldr	r3, [pc, #124]	; (8000f1c <HAL_RCC_OscConfig+0x4c4>)
 8000e9e:	685b      	ldr	r3, [r3, #4]
 8000ea0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	6a19      	ldr	r1, [r3, #32]
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000eac:	430b      	orrs	r3, r1
 8000eae:	491b      	ldr	r1, [pc, #108]	; (8000f1c <HAL_RCC_OscConfig+0x4c4>)
 8000eb0:	4313      	orrs	r3, r2
 8000eb2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000eb4:	4b1b      	ldr	r3, [pc, #108]	; (8000f24 <HAL_RCC_OscConfig+0x4cc>)
 8000eb6:	2201      	movs	r2, #1
 8000eb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000eba:	f7ff fb1f 	bl	80004fc <HAL_GetTick>
 8000ebe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000ec0:	e008      	b.n	8000ed4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000ec2:	f7ff fb1b 	bl	80004fc <HAL_GetTick>
 8000ec6:	4602      	mov	r2, r0
 8000ec8:	693b      	ldr	r3, [r7, #16]
 8000eca:	1ad3      	subs	r3, r2, r3
 8000ecc:	2b02      	cmp	r3, #2
 8000ece:	d901      	bls.n	8000ed4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8000ed0:	2303      	movs	r3, #3
 8000ed2:	e03d      	b.n	8000f50 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000ed4:	4b11      	ldr	r3, [pc, #68]	; (8000f1c <HAL_RCC_OscConfig+0x4c4>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d0f0      	beq.n	8000ec2 <HAL_RCC_OscConfig+0x46a>
 8000ee0:	e035      	b.n	8000f4e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000ee2:	4b10      	ldr	r3, [pc, #64]	; (8000f24 <HAL_RCC_OscConfig+0x4cc>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ee8:	f7ff fb08 	bl	80004fc <HAL_GetTick>
 8000eec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000eee:	e008      	b.n	8000f02 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000ef0:	f7ff fb04 	bl	80004fc <HAL_GetTick>
 8000ef4:	4602      	mov	r2, r0
 8000ef6:	693b      	ldr	r3, [r7, #16]
 8000ef8:	1ad3      	subs	r3, r2, r3
 8000efa:	2b02      	cmp	r3, #2
 8000efc:	d901      	bls.n	8000f02 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8000efe:	2303      	movs	r3, #3
 8000f00:	e026      	b.n	8000f50 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f02:	4b06      	ldr	r3, [pc, #24]	; (8000f1c <HAL_RCC_OscConfig+0x4c4>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d1f0      	bne.n	8000ef0 <HAL_RCC_OscConfig+0x498>
 8000f0e:	e01e      	b.n	8000f4e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	69db      	ldr	r3, [r3, #28]
 8000f14:	2b01      	cmp	r3, #1
 8000f16:	d107      	bne.n	8000f28 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8000f18:	2301      	movs	r3, #1
 8000f1a:	e019      	b.n	8000f50 <HAL_RCC_OscConfig+0x4f8>
 8000f1c:	40021000 	.word	0x40021000
 8000f20:	40007000 	.word	0x40007000
 8000f24:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8000f28:	4b0b      	ldr	r3, [pc, #44]	; (8000f58 <HAL_RCC_OscConfig+0x500>)
 8000f2a:	685b      	ldr	r3, [r3, #4]
 8000f2c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	6a1b      	ldr	r3, [r3, #32]
 8000f38:	429a      	cmp	r2, r3
 8000f3a:	d106      	bne.n	8000f4a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000f46:	429a      	cmp	r2, r3
 8000f48:	d001      	beq.n	8000f4e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	e000      	b.n	8000f50 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8000f4e:	2300      	movs	r3, #0
}
 8000f50:	4618      	mov	r0, r3
 8000f52:	3718      	adds	r7, #24
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	40021000 	.word	0x40021000

08000f5c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b084      	sub	sp, #16
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
 8000f64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d101      	bne.n	8000f70 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000f6c:	2301      	movs	r3, #1
 8000f6e:	e0d0      	b.n	8001112 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000f70:	4b6a      	ldr	r3, [pc, #424]	; (800111c <HAL_RCC_ClockConfig+0x1c0>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	f003 0307 	and.w	r3, r3, #7
 8000f78:	683a      	ldr	r2, [r7, #0]
 8000f7a:	429a      	cmp	r2, r3
 8000f7c:	d910      	bls.n	8000fa0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000f7e:	4b67      	ldr	r3, [pc, #412]	; (800111c <HAL_RCC_ClockConfig+0x1c0>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	f023 0207 	bic.w	r2, r3, #7
 8000f86:	4965      	ldr	r1, [pc, #404]	; (800111c <HAL_RCC_ClockConfig+0x1c0>)
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	4313      	orrs	r3, r2
 8000f8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000f8e:	4b63      	ldr	r3, [pc, #396]	; (800111c <HAL_RCC_ClockConfig+0x1c0>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	f003 0307 	and.w	r3, r3, #7
 8000f96:	683a      	ldr	r2, [r7, #0]
 8000f98:	429a      	cmp	r2, r3
 8000f9a:	d001      	beq.n	8000fa0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8000f9c:	2301      	movs	r3, #1
 8000f9e:	e0b8      	b.n	8001112 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	f003 0302 	and.w	r3, r3, #2
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d020      	beq.n	8000fee <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	f003 0304 	and.w	r3, r3, #4
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d005      	beq.n	8000fc4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000fb8:	4b59      	ldr	r3, [pc, #356]	; (8001120 <HAL_RCC_ClockConfig+0x1c4>)
 8000fba:	685b      	ldr	r3, [r3, #4]
 8000fbc:	4a58      	ldr	r2, [pc, #352]	; (8001120 <HAL_RCC_ClockConfig+0x1c4>)
 8000fbe:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8000fc2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	f003 0308 	and.w	r3, r3, #8
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d005      	beq.n	8000fdc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000fd0:	4b53      	ldr	r3, [pc, #332]	; (8001120 <HAL_RCC_ClockConfig+0x1c4>)
 8000fd2:	685b      	ldr	r3, [r3, #4]
 8000fd4:	4a52      	ldr	r2, [pc, #328]	; (8001120 <HAL_RCC_ClockConfig+0x1c4>)
 8000fd6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8000fda:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000fdc:	4b50      	ldr	r3, [pc, #320]	; (8001120 <HAL_RCC_ClockConfig+0x1c4>)
 8000fde:	685b      	ldr	r3, [r3, #4]
 8000fe0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	689b      	ldr	r3, [r3, #8]
 8000fe8:	494d      	ldr	r1, [pc, #308]	; (8001120 <HAL_RCC_ClockConfig+0x1c4>)
 8000fea:	4313      	orrs	r3, r2
 8000fec:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	f003 0301 	and.w	r3, r3, #1
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d040      	beq.n	800107c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	685b      	ldr	r3, [r3, #4]
 8000ffe:	2b01      	cmp	r3, #1
 8001000:	d107      	bne.n	8001012 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001002:	4b47      	ldr	r3, [pc, #284]	; (8001120 <HAL_RCC_ClockConfig+0x1c4>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800100a:	2b00      	cmp	r3, #0
 800100c:	d115      	bne.n	800103a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800100e:	2301      	movs	r3, #1
 8001010:	e07f      	b.n	8001112 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	685b      	ldr	r3, [r3, #4]
 8001016:	2b02      	cmp	r3, #2
 8001018:	d107      	bne.n	800102a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800101a:	4b41      	ldr	r3, [pc, #260]	; (8001120 <HAL_RCC_ClockConfig+0x1c4>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001022:	2b00      	cmp	r3, #0
 8001024:	d109      	bne.n	800103a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001026:	2301      	movs	r3, #1
 8001028:	e073      	b.n	8001112 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800102a:	4b3d      	ldr	r3, [pc, #244]	; (8001120 <HAL_RCC_ClockConfig+0x1c4>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	f003 0302 	and.w	r3, r3, #2
 8001032:	2b00      	cmp	r3, #0
 8001034:	d101      	bne.n	800103a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001036:	2301      	movs	r3, #1
 8001038:	e06b      	b.n	8001112 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800103a:	4b39      	ldr	r3, [pc, #228]	; (8001120 <HAL_RCC_ClockConfig+0x1c4>)
 800103c:	685b      	ldr	r3, [r3, #4]
 800103e:	f023 0203 	bic.w	r2, r3, #3
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	685b      	ldr	r3, [r3, #4]
 8001046:	4936      	ldr	r1, [pc, #216]	; (8001120 <HAL_RCC_ClockConfig+0x1c4>)
 8001048:	4313      	orrs	r3, r2
 800104a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800104c:	f7ff fa56 	bl	80004fc <HAL_GetTick>
 8001050:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001052:	e00a      	b.n	800106a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001054:	f7ff fa52 	bl	80004fc <HAL_GetTick>
 8001058:	4602      	mov	r2, r0
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	1ad3      	subs	r3, r2, r3
 800105e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001062:	4293      	cmp	r3, r2
 8001064:	d901      	bls.n	800106a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001066:	2303      	movs	r3, #3
 8001068:	e053      	b.n	8001112 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800106a:	4b2d      	ldr	r3, [pc, #180]	; (8001120 <HAL_RCC_ClockConfig+0x1c4>)
 800106c:	685b      	ldr	r3, [r3, #4]
 800106e:	f003 020c 	and.w	r2, r3, #12
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	685b      	ldr	r3, [r3, #4]
 8001076:	009b      	lsls	r3, r3, #2
 8001078:	429a      	cmp	r2, r3
 800107a:	d1eb      	bne.n	8001054 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800107c:	4b27      	ldr	r3, [pc, #156]	; (800111c <HAL_RCC_ClockConfig+0x1c0>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	f003 0307 	and.w	r3, r3, #7
 8001084:	683a      	ldr	r2, [r7, #0]
 8001086:	429a      	cmp	r2, r3
 8001088:	d210      	bcs.n	80010ac <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800108a:	4b24      	ldr	r3, [pc, #144]	; (800111c <HAL_RCC_ClockConfig+0x1c0>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	f023 0207 	bic.w	r2, r3, #7
 8001092:	4922      	ldr	r1, [pc, #136]	; (800111c <HAL_RCC_ClockConfig+0x1c0>)
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	4313      	orrs	r3, r2
 8001098:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800109a:	4b20      	ldr	r3, [pc, #128]	; (800111c <HAL_RCC_ClockConfig+0x1c0>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f003 0307 	and.w	r3, r3, #7
 80010a2:	683a      	ldr	r2, [r7, #0]
 80010a4:	429a      	cmp	r2, r3
 80010a6:	d001      	beq.n	80010ac <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80010a8:	2301      	movs	r3, #1
 80010aa:	e032      	b.n	8001112 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	f003 0304 	and.w	r3, r3, #4
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d008      	beq.n	80010ca <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80010b8:	4b19      	ldr	r3, [pc, #100]	; (8001120 <HAL_RCC_ClockConfig+0x1c4>)
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	68db      	ldr	r3, [r3, #12]
 80010c4:	4916      	ldr	r1, [pc, #88]	; (8001120 <HAL_RCC_ClockConfig+0x1c4>)
 80010c6:	4313      	orrs	r3, r2
 80010c8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	f003 0308 	and.w	r3, r3, #8
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d009      	beq.n	80010ea <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80010d6:	4b12      	ldr	r3, [pc, #72]	; (8001120 <HAL_RCC_ClockConfig+0x1c4>)
 80010d8:	685b      	ldr	r3, [r3, #4]
 80010da:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	691b      	ldr	r3, [r3, #16]
 80010e2:	00db      	lsls	r3, r3, #3
 80010e4:	490e      	ldr	r1, [pc, #56]	; (8001120 <HAL_RCC_ClockConfig+0x1c4>)
 80010e6:	4313      	orrs	r3, r2
 80010e8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80010ea:	f000 f821 	bl	8001130 <HAL_RCC_GetSysClockFreq>
 80010ee:	4602      	mov	r2, r0
 80010f0:	4b0b      	ldr	r3, [pc, #44]	; (8001120 <HAL_RCC_ClockConfig+0x1c4>)
 80010f2:	685b      	ldr	r3, [r3, #4]
 80010f4:	091b      	lsrs	r3, r3, #4
 80010f6:	f003 030f 	and.w	r3, r3, #15
 80010fa:	490a      	ldr	r1, [pc, #40]	; (8001124 <HAL_RCC_ClockConfig+0x1c8>)
 80010fc:	5ccb      	ldrb	r3, [r1, r3]
 80010fe:	fa22 f303 	lsr.w	r3, r2, r3
 8001102:	4a09      	ldr	r2, [pc, #36]	; (8001128 <HAL_RCC_ClockConfig+0x1cc>)
 8001104:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001106:	4b09      	ldr	r3, [pc, #36]	; (800112c <HAL_RCC_ClockConfig+0x1d0>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	4618      	mov	r0, r3
 800110c:	f7ff f9b4 	bl	8000478 <HAL_InitTick>

  return HAL_OK;
 8001110:	2300      	movs	r3, #0
}
 8001112:	4618      	mov	r0, r3
 8001114:	3710      	adds	r7, #16
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	40022000 	.word	0x40022000
 8001120:	40021000 	.word	0x40021000
 8001124:	080021c4 	.word	0x080021c4
 8001128:	20000000 	.word	0x20000000
 800112c:	20000004 	.word	0x20000004

08001130 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001130:	b480      	push	{r7}
 8001132:	b087      	sub	sp, #28
 8001134:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001136:	2300      	movs	r3, #0
 8001138:	60fb      	str	r3, [r7, #12]
 800113a:	2300      	movs	r3, #0
 800113c:	60bb      	str	r3, [r7, #8]
 800113e:	2300      	movs	r3, #0
 8001140:	617b      	str	r3, [r7, #20]
 8001142:	2300      	movs	r3, #0
 8001144:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001146:	2300      	movs	r3, #0
 8001148:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800114a:	4b1e      	ldr	r3, [pc, #120]	; (80011c4 <HAL_RCC_GetSysClockFreq+0x94>)
 800114c:	685b      	ldr	r3, [r3, #4]
 800114e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	f003 030c 	and.w	r3, r3, #12
 8001156:	2b04      	cmp	r3, #4
 8001158:	d002      	beq.n	8001160 <HAL_RCC_GetSysClockFreq+0x30>
 800115a:	2b08      	cmp	r3, #8
 800115c:	d003      	beq.n	8001166 <HAL_RCC_GetSysClockFreq+0x36>
 800115e:	e027      	b.n	80011b0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001160:	4b19      	ldr	r3, [pc, #100]	; (80011c8 <HAL_RCC_GetSysClockFreq+0x98>)
 8001162:	613b      	str	r3, [r7, #16]
      break;
 8001164:	e027      	b.n	80011b6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	0c9b      	lsrs	r3, r3, #18
 800116a:	f003 030f 	and.w	r3, r3, #15
 800116e:	4a17      	ldr	r2, [pc, #92]	; (80011cc <HAL_RCC_GetSysClockFreq+0x9c>)
 8001170:	5cd3      	ldrb	r3, [r2, r3]
 8001172:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800117a:	2b00      	cmp	r3, #0
 800117c:	d010      	beq.n	80011a0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800117e:	4b11      	ldr	r3, [pc, #68]	; (80011c4 <HAL_RCC_GetSysClockFreq+0x94>)
 8001180:	685b      	ldr	r3, [r3, #4]
 8001182:	0c5b      	lsrs	r3, r3, #17
 8001184:	f003 0301 	and.w	r3, r3, #1
 8001188:	4a11      	ldr	r2, [pc, #68]	; (80011d0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800118a:	5cd3      	ldrb	r3, [r2, r3]
 800118c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	4a0d      	ldr	r2, [pc, #52]	; (80011c8 <HAL_RCC_GetSysClockFreq+0x98>)
 8001192:	fb03 f202 	mul.w	r2, r3, r2
 8001196:	68bb      	ldr	r3, [r7, #8]
 8001198:	fbb2 f3f3 	udiv	r3, r2, r3
 800119c:	617b      	str	r3, [r7, #20]
 800119e:	e004      	b.n	80011aa <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	4a0c      	ldr	r2, [pc, #48]	; (80011d4 <HAL_RCC_GetSysClockFreq+0xa4>)
 80011a4:	fb02 f303 	mul.w	r3, r2, r3
 80011a8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80011aa:	697b      	ldr	r3, [r7, #20]
 80011ac:	613b      	str	r3, [r7, #16]
      break;
 80011ae:	e002      	b.n	80011b6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80011b0:	4b05      	ldr	r3, [pc, #20]	; (80011c8 <HAL_RCC_GetSysClockFreq+0x98>)
 80011b2:	613b      	str	r3, [r7, #16]
      break;
 80011b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80011b6:	693b      	ldr	r3, [r7, #16]
}
 80011b8:	4618      	mov	r0, r3
 80011ba:	371c      	adds	r7, #28
 80011bc:	46bd      	mov	sp, r7
 80011be:	bc80      	pop	{r7}
 80011c0:	4770      	bx	lr
 80011c2:	bf00      	nop
 80011c4:	40021000 	.word	0x40021000
 80011c8:	007a1200 	.word	0x007a1200
 80011cc:	080021d4 	.word	0x080021d4
 80011d0:	080021e4 	.word	0x080021e4
 80011d4:	003d0900 	.word	0x003d0900

080011d8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80011d8:	b480      	push	{r7}
 80011da:	b085      	sub	sp, #20
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80011e0:	4b0a      	ldr	r3, [pc, #40]	; (800120c <RCC_Delay+0x34>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	4a0a      	ldr	r2, [pc, #40]	; (8001210 <RCC_Delay+0x38>)
 80011e6:	fba2 2303 	umull	r2, r3, r2, r3
 80011ea:	0a5b      	lsrs	r3, r3, #9
 80011ec:	687a      	ldr	r2, [r7, #4]
 80011ee:	fb02 f303 	mul.w	r3, r2, r3
 80011f2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80011f4:	bf00      	nop
  }
  while (Delay --);
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	1e5a      	subs	r2, r3, #1
 80011fa:	60fa      	str	r2, [r7, #12]
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d1f9      	bne.n	80011f4 <RCC_Delay+0x1c>
}
 8001200:	bf00      	nop
 8001202:	bf00      	nop
 8001204:	3714      	adds	r7, #20
 8001206:	46bd      	mov	sp, r7
 8001208:	bc80      	pop	{r7}
 800120a:	4770      	bx	lr
 800120c:	20000000 	.word	0x20000000
 8001210:	10624dd3 	.word	0x10624dd3

08001214 <__errno>:
 8001214:	4b01      	ldr	r3, [pc, #4]	; (800121c <__errno+0x8>)
 8001216:	6818      	ldr	r0, [r3, #0]
 8001218:	4770      	bx	lr
 800121a:	bf00      	nop
 800121c:	2000000c 	.word	0x2000000c

08001220 <__libc_init_array>:
 8001220:	b570      	push	{r4, r5, r6, lr}
 8001222:	2600      	movs	r6, #0
 8001224:	4d0c      	ldr	r5, [pc, #48]	; (8001258 <__libc_init_array+0x38>)
 8001226:	4c0d      	ldr	r4, [pc, #52]	; (800125c <__libc_init_array+0x3c>)
 8001228:	1b64      	subs	r4, r4, r5
 800122a:	10a4      	asrs	r4, r4, #2
 800122c:	42a6      	cmp	r6, r4
 800122e:	d109      	bne.n	8001244 <__libc_init_array+0x24>
 8001230:	f000 ffb4 	bl	800219c <_init>
 8001234:	2600      	movs	r6, #0
 8001236:	4d0a      	ldr	r5, [pc, #40]	; (8001260 <__libc_init_array+0x40>)
 8001238:	4c0a      	ldr	r4, [pc, #40]	; (8001264 <__libc_init_array+0x44>)
 800123a:	1b64      	subs	r4, r4, r5
 800123c:	10a4      	asrs	r4, r4, #2
 800123e:	42a6      	cmp	r6, r4
 8001240:	d105      	bne.n	800124e <__libc_init_array+0x2e>
 8001242:	bd70      	pop	{r4, r5, r6, pc}
 8001244:	f855 3b04 	ldr.w	r3, [r5], #4
 8001248:	4798      	blx	r3
 800124a:	3601      	adds	r6, #1
 800124c:	e7ee      	b.n	800122c <__libc_init_array+0xc>
 800124e:	f855 3b04 	ldr.w	r3, [r5], #4
 8001252:	4798      	blx	r3
 8001254:	3601      	adds	r6, #1
 8001256:	e7f2      	b.n	800123e <__libc_init_array+0x1e>
 8001258:	08002268 	.word	0x08002268
 800125c:	08002268 	.word	0x08002268
 8001260:	08002268 	.word	0x08002268
 8001264:	0800226c 	.word	0x0800226c

08001268 <memset>:
 8001268:	4603      	mov	r3, r0
 800126a:	4402      	add	r2, r0
 800126c:	4293      	cmp	r3, r2
 800126e:	d100      	bne.n	8001272 <memset+0xa>
 8001270:	4770      	bx	lr
 8001272:	f803 1b01 	strb.w	r1, [r3], #1
 8001276:	e7f9      	b.n	800126c <memset+0x4>

08001278 <_puts_r>:
 8001278:	b570      	push	{r4, r5, r6, lr}
 800127a:	460e      	mov	r6, r1
 800127c:	4605      	mov	r5, r0
 800127e:	b118      	cbz	r0, 8001288 <_puts_r+0x10>
 8001280:	6983      	ldr	r3, [r0, #24]
 8001282:	b90b      	cbnz	r3, 8001288 <_puts_r+0x10>
 8001284:	f000 fa44 	bl	8001710 <__sinit>
 8001288:	69ab      	ldr	r3, [r5, #24]
 800128a:	68ac      	ldr	r4, [r5, #8]
 800128c:	b913      	cbnz	r3, 8001294 <_puts_r+0x1c>
 800128e:	4628      	mov	r0, r5
 8001290:	f000 fa3e 	bl	8001710 <__sinit>
 8001294:	4b2c      	ldr	r3, [pc, #176]	; (8001348 <_puts_r+0xd0>)
 8001296:	429c      	cmp	r4, r3
 8001298:	d120      	bne.n	80012dc <_puts_r+0x64>
 800129a:	686c      	ldr	r4, [r5, #4]
 800129c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800129e:	07db      	lsls	r3, r3, #31
 80012a0:	d405      	bmi.n	80012ae <_puts_r+0x36>
 80012a2:	89a3      	ldrh	r3, [r4, #12]
 80012a4:	0598      	lsls	r0, r3, #22
 80012a6:	d402      	bmi.n	80012ae <_puts_r+0x36>
 80012a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80012aa:	f000 facf 	bl	800184c <__retarget_lock_acquire_recursive>
 80012ae:	89a3      	ldrh	r3, [r4, #12]
 80012b0:	0719      	lsls	r1, r3, #28
 80012b2:	d51d      	bpl.n	80012f0 <_puts_r+0x78>
 80012b4:	6923      	ldr	r3, [r4, #16]
 80012b6:	b1db      	cbz	r3, 80012f0 <_puts_r+0x78>
 80012b8:	3e01      	subs	r6, #1
 80012ba:	68a3      	ldr	r3, [r4, #8]
 80012bc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80012c0:	3b01      	subs	r3, #1
 80012c2:	60a3      	str	r3, [r4, #8]
 80012c4:	bb39      	cbnz	r1, 8001316 <_puts_r+0x9e>
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	da38      	bge.n	800133c <_puts_r+0xc4>
 80012ca:	4622      	mov	r2, r4
 80012cc:	210a      	movs	r1, #10
 80012ce:	4628      	mov	r0, r5
 80012d0:	f000 f848 	bl	8001364 <__swbuf_r>
 80012d4:	3001      	adds	r0, #1
 80012d6:	d011      	beq.n	80012fc <_puts_r+0x84>
 80012d8:	250a      	movs	r5, #10
 80012da:	e011      	b.n	8001300 <_puts_r+0x88>
 80012dc:	4b1b      	ldr	r3, [pc, #108]	; (800134c <_puts_r+0xd4>)
 80012de:	429c      	cmp	r4, r3
 80012e0:	d101      	bne.n	80012e6 <_puts_r+0x6e>
 80012e2:	68ac      	ldr	r4, [r5, #8]
 80012e4:	e7da      	b.n	800129c <_puts_r+0x24>
 80012e6:	4b1a      	ldr	r3, [pc, #104]	; (8001350 <_puts_r+0xd8>)
 80012e8:	429c      	cmp	r4, r3
 80012ea:	bf08      	it	eq
 80012ec:	68ec      	ldreq	r4, [r5, #12]
 80012ee:	e7d5      	b.n	800129c <_puts_r+0x24>
 80012f0:	4621      	mov	r1, r4
 80012f2:	4628      	mov	r0, r5
 80012f4:	f000 f888 	bl	8001408 <__swsetup_r>
 80012f8:	2800      	cmp	r0, #0
 80012fa:	d0dd      	beq.n	80012b8 <_puts_r+0x40>
 80012fc:	f04f 35ff 	mov.w	r5, #4294967295
 8001300:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001302:	07da      	lsls	r2, r3, #31
 8001304:	d405      	bmi.n	8001312 <_puts_r+0x9a>
 8001306:	89a3      	ldrh	r3, [r4, #12]
 8001308:	059b      	lsls	r3, r3, #22
 800130a:	d402      	bmi.n	8001312 <_puts_r+0x9a>
 800130c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800130e:	f000 fa9e 	bl	800184e <__retarget_lock_release_recursive>
 8001312:	4628      	mov	r0, r5
 8001314:	bd70      	pop	{r4, r5, r6, pc}
 8001316:	2b00      	cmp	r3, #0
 8001318:	da04      	bge.n	8001324 <_puts_r+0xac>
 800131a:	69a2      	ldr	r2, [r4, #24]
 800131c:	429a      	cmp	r2, r3
 800131e:	dc06      	bgt.n	800132e <_puts_r+0xb6>
 8001320:	290a      	cmp	r1, #10
 8001322:	d004      	beq.n	800132e <_puts_r+0xb6>
 8001324:	6823      	ldr	r3, [r4, #0]
 8001326:	1c5a      	adds	r2, r3, #1
 8001328:	6022      	str	r2, [r4, #0]
 800132a:	7019      	strb	r1, [r3, #0]
 800132c:	e7c5      	b.n	80012ba <_puts_r+0x42>
 800132e:	4622      	mov	r2, r4
 8001330:	4628      	mov	r0, r5
 8001332:	f000 f817 	bl	8001364 <__swbuf_r>
 8001336:	3001      	adds	r0, #1
 8001338:	d1bf      	bne.n	80012ba <_puts_r+0x42>
 800133a:	e7df      	b.n	80012fc <_puts_r+0x84>
 800133c:	250a      	movs	r5, #10
 800133e:	6823      	ldr	r3, [r4, #0]
 8001340:	1c5a      	adds	r2, r3, #1
 8001342:	6022      	str	r2, [r4, #0]
 8001344:	701d      	strb	r5, [r3, #0]
 8001346:	e7db      	b.n	8001300 <_puts_r+0x88>
 8001348:	0800220c 	.word	0x0800220c
 800134c:	0800222c 	.word	0x0800222c
 8001350:	080021ec 	.word	0x080021ec

08001354 <puts>:
 8001354:	4b02      	ldr	r3, [pc, #8]	; (8001360 <puts+0xc>)
 8001356:	4601      	mov	r1, r0
 8001358:	6818      	ldr	r0, [r3, #0]
 800135a:	f7ff bf8d 	b.w	8001278 <_puts_r>
 800135e:	bf00      	nop
 8001360:	2000000c 	.word	0x2000000c

08001364 <__swbuf_r>:
 8001364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001366:	460e      	mov	r6, r1
 8001368:	4614      	mov	r4, r2
 800136a:	4605      	mov	r5, r0
 800136c:	b118      	cbz	r0, 8001376 <__swbuf_r+0x12>
 800136e:	6983      	ldr	r3, [r0, #24]
 8001370:	b90b      	cbnz	r3, 8001376 <__swbuf_r+0x12>
 8001372:	f000 f9cd 	bl	8001710 <__sinit>
 8001376:	4b21      	ldr	r3, [pc, #132]	; (80013fc <__swbuf_r+0x98>)
 8001378:	429c      	cmp	r4, r3
 800137a:	d12b      	bne.n	80013d4 <__swbuf_r+0x70>
 800137c:	686c      	ldr	r4, [r5, #4]
 800137e:	69a3      	ldr	r3, [r4, #24]
 8001380:	60a3      	str	r3, [r4, #8]
 8001382:	89a3      	ldrh	r3, [r4, #12]
 8001384:	071a      	lsls	r2, r3, #28
 8001386:	d52f      	bpl.n	80013e8 <__swbuf_r+0x84>
 8001388:	6923      	ldr	r3, [r4, #16]
 800138a:	b36b      	cbz	r3, 80013e8 <__swbuf_r+0x84>
 800138c:	6923      	ldr	r3, [r4, #16]
 800138e:	6820      	ldr	r0, [r4, #0]
 8001390:	b2f6      	uxtb	r6, r6
 8001392:	1ac0      	subs	r0, r0, r3
 8001394:	6963      	ldr	r3, [r4, #20]
 8001396:	4637      	mov	r7, r6
 8001398:	4283      	cmp	r3, r0
 800139a:	dc04      	bgt.n	80013a6 <__swbuf_r+0x42>
 800139c:	4621      	mov	r1, r4
 800139e:	4628      	mov	r0, r5
 80013a0:	f000 f922 	bl	80015e8 <_fflush_r>
 80013a4:	bb30      	cbnz	r0, 80013f4 <__swbuf_r+0x90>
 80013a6:	68a3      	ldr	r3, [r4, #8]
 80013a8:	3001      	adds	r0, #1
 80013aa:	3b01      	subs	r3, #1
 80013ac:	60a3      	str	r3, [r4, #8]
 80013ae:	6823      	ldr	r3, [r4, #0]
 80013b0:	1c5a      	adds	r2, r3, #1
 80013b2:	6022      	str	r2, [r4, #0]
 80013b4:	701e      	strb	r6, [r3, #0]
 80013b6:	6963      	ldr	r3, [r4, #20]
 80013b8:	4283      	cmp	r3, r0
 80013ba:	d004      	beq.n	80013c6 <__swbuf_r+0x62>
 80013bc:	89a3      	ldrh	r3, [r4, #12]
 80013be:	07db      	lsls	r3, r3, #31
 80013c0:	d506      	bpl.n	80013d0 <__swbuf_r+0x6c>
 80013c2:	2e0a      	cmp	r6, #10
 80013c4:	d104      	bne.n	80013d0 <__swbuf_r+0x6c>
 80013c6:	4621      	mov	r1, r4
 80013c8:	4628      	mov	r0, r5
 80013ca:	f000 f90d 	bl	80015e8 <_fflush_r>
 80013ce:	b988      	cbnz	r0, 80013f4 <__swbuf_r+0x90>
 80013d0:	4638      	mov	r0, r7
 80013d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80013d4:	4b0a      	ldr	r3, [pc, #40]	; (8001400 <__swbuf_r+0x9c>)
 80013d6:	429c      	cmp	r4, r3
 80013d8:	d101      	bne.n	80013de <__swbuf_r+0x7a>
 80013da:	68ac      	ldr	r4, [r5, #8]
 80013dc:	e7cf      	b.n	800137e <__swbuf_r+0x1a>
 80013de:	4b09      	ldr	r3, [pc, #36]	; (8001404 <__swbuf_r+0xa0>)
 80013e0:	429c      	cmp	r4, r3
 80013e2:	bf08      	it	eq
 80013e4:	68ec      	ldreq	r4, [r5, #12]
 80013e6:	e7ca      	b.n	800137e <__swbuf_r+0x1a>
 80013e8:	4621      	mov	r1, r4
 80013ea:	4628      	mov	r0, r5
 80013ec:	f000 f80c 	bl	8001408 <__swsetup_r>
 80013f0:	2800      	cmp	r0, #0
 80013f2:	d0cb      	beq.n	800138c <__swbuf_r+0x28>
 80013f4:	f04f 37ff 	mov.w	r7, #4294967295
 80013f8:	e7ea      	b.n	80013d0 <__swbuf_r+0x6c>
 80013fa:	bf00      	nop
 80013fc:	0800220c 	.word	0x0800220c
 8001400:	0800222c 	.word	0x0800222c
 8001404:	080021ec 	.word	0x080021ec

08001408 <__swsetup_r>:
 8001408:	4b32      	ldr	r3, [pc, #200]	; (80014d4 <__swsetup_r+0xcc>)
 800140a:	b570      	push	{r4, r5, r6, lr}
 800140c:	681d      	ldr	r5, [r3, #0]
 800140e:	4606      	mov	r6, r0
 8001410:	460c      	mov	r4, r1
 8001412:	b125      	cbz	r5, 800141e <__swsetup_r+0x16>
 8001414:	69ab      	ldr	r3, [r5, #24]
 8001416:	b913      	cbnz	r3, 800141e <__swsetup_r+0x16>
 8001418:	4628      	mov	r0, r5
 800141a:	f000 f979 	bl	8001710 <__sinit>
 800141e:	4b2e      	ldr	r3, [pc, #184]	; (80014d8 <__swsetup_r+0xd0>)
 8001420:	429c      	cmp	r4, r3
 8001422:	d10f      	bne.n	8001444 <__swsetup_r+0x3c>
 8001424:	686c      	ldr	r4, [r5, #4]
 8001426:	89a3      	ldrh	r3, [r4, #12]
 8001428:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800142c:	0719      	lsls	r1, r3, #28
 800142e:	d42c      	bmi.n	800148a <__swsetup_r+0x82>
 8001430:	06dd      	lsls	r5, r3, #27
 8001432:	d411      	bmi.n	8001458 <__swsetup_r+0x50>
 8001434:	2309      	movs	r3, #9
 8001436:	6033      	str	r3, [r6, #0]
 8001438:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800143c:	f04f 30ff 	mov.w	r0, #4294967295
 8001440:	81a3      	strh	r3, [r4, #12]
 8001442:	e03e      	b.n	80014c2 <__swsetup_r+0xba>
 8001444:	4b25      	ldr	r3, [pc, #148]	; (80014dc <__swsetup_r+0xd4>)
 8001446:	429c      	cmp	r4, r3
 8001448:	d101      	bne.n	800144e <__swsetup_r+0x46>
 800144a:	68ac      	ldr	r4, [r5, #8]
 800144c:	e7eb      	b.n	8001426 <__swsetup_r+0x1e>
 800144e:	4b24      	ldr	r3, [pc, #144]	; (80014e0 <__swsetup_r+0xd8>)
 8001450:	429c      	cmp	r4, r3
 8001452:	bf08      	it	eq
 8001454:	68ec      	ldreq	r4, [r5, #12]
 8001456:	e7e6      	b.n	8001426 <__swsetup_r+0x1e>
 8001458:	0758      	lsls	r0, r3, #29
 800145a:	d512      	bpl.n	8001482 <__swsetup_r+0x7a>
 800145c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800145e:	b141      	cbz	r1, 8001472 <__swsetup_r+0x6a>
 8001460:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001464:	4299      	cmp	r1, r3
 8001466:	d002      	beq.n	800146e <__swsetup_r+0x66>
 8001468:	4630      	mov	r0, r6
 800146a:	f000 fa57 	bl	800191c <_free_r>
 800146e:	2300      	movs	r3, #0
 8001470:	6363      	str	r3, [r4, #52]	; 0x34
 8001472:	89a3      	ldrh	r3, [r4, #12]
 8001474:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001478:	81a3      	strh	r3, [r4, #12]
 800147a:	2300      	movs	r3, #0
 800147c:	6063      	str	r3, [r4, #4]
 800147e:	6923      	ldr	r3, [r4, #16]
 8001480:	6023      	str	r3, [r4, #0]
 8001482:	89a3      	ldrh	r3, [r4, #12]
 8001484:	f043 0308 	orr.w	r3, r3, #8
 8001488:	81a3      	strh	r3, [r4, #12]
 800148a:	6923      	ldr	r3, [r4, #16]
 800148c:	b94b      	cbnz	r3, 80014a2 <__swsetup_r+0x9a>
 800148e:	89a3      	ldrh	r3, [r4, #12]
 8001490:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001494:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001498:	d003      	beq.n	80014a2 <__swsetup_r+0x9a>
 800149a:	4621      	mov	r1, r4
 800149c:	4630      	mov	r0, r6
 800149e:	f000 f9fd 	bl	800189c <__smakebuf_r>
 80014a2:	89a0      	ldrh	r0, [r4, #12]
 80014a4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80014a8:	f010 0301 	ands.w	r3, r0, #1
 80014ac:	d00a      	beq.n	80014c4 <__swsetup_r+0xbc>
 80014ae:	2300      	movs	r3, #0
 80014b0:	60a3      	str	r3, [r4, #8]
 80014b2:	6963      	ldr	r3, [r4, #20]
 80014b4:	425b      	negs	r3, r3
 80014b6:	61a3      	str	r3, [r4, #24]
 80014b8:	6923      	ldr	r3, [r4, #16]
 80014ba:	b943      	cbnz	r3, 80014ce <__swsetup_r+0xc6>
 80014bc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80014c0:	d1ba      	bne.n	8001438 <__swsetup_r+0x30>
 80014c2:	bd70      	pop	{r4, r5, r6, pc}
 80014c4:	0781      	lsls	r1, r0, #30
 80014c6:	bf58      	it	pl
 80014c8:	6963      	ldrpl	r3, [r4, #20]
 80014ca:	60a3      	str	r3, [r4, #8]
 80014cc:	e7f4      	b.n	80014b8 <__swsetup_r+0xb0>
 80014ce:	2000      	movs	r0, #0
 80014d0:	e7f7      	b.n	80014c2 <__swsetup_r+0xba>
 80014d2:	bf00      	nop
 80014d4:	2000000c 	.word	0x2000000c
 80014d8:	0800220c 	.word	0x0800220c
 80014dc:	0800222c 	.word	0x0800222c
 80014e0:	080021ec 	.word	0x080021ec

080014e4 <__sflush_r>:
 80014e4:	898a      	ldrh	r2, [r1, #12]
 80014e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80014e8:	4605      	mov	r5, r0
 80014ea:	0710      	lsls	r0, r2, #28
 80014ec:	460c      	mov	r4, r1
 80014ee:	d457      	bmi.n	80015a0 <__sflush_r+0xbc>
 80014f0:	684b      	ldr	r3, [r1, #4]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	dc04      	bgt.n	8001500 <__sflush_r+0x1c>
 80014f6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	dc01      	bgt.n	8001500 <__sflush_r+0x1c>
 80014fc:	2000      	movs	r0, #0
 80014fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001500:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001502:	2e00      	cmp	r6, #0
 8001504:	d0fa      	beq.n	80014fc <__sflush_r+0x18>
 8001506:	2300      	movs	r3, #0
 8001508:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800150c:	682f      	ldr	r7, [r5, #0]
 800150e:	602b      	str	r3, [r5, #0]
 8001510:	d032      	beq.n	8001578 <__sflush_r+0x94>
 8001512:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001514:	89a3      	ldrh	r3, [r4, #12]
 8001516:	075a      	lsls	r2, r3, #29
 8001518:	d505      	bpl.n	8001526 <__sflush_r+0x42>
 800151a:	6863      	ldr	r3, [r4, #4]
 800151c:	1ac0      	subs	r0, r0, r3
 800151e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001520:	b10b      	cbz	r3, 8001526 <__sflush_r+0x42>
 8001522:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001524:	1ac0      	subs	r0, r0, r3
 8001526:	2300      	movs	r3, #0
 8001528:	4602      	mov	r2, r0
 800152a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800152c:	4628      	mov	r0, r5
 800152e:	6a21      	ldr	r1, [r4, #32]
 8001530:	47b0      	blx	r6
 8001532:	1c43      	adds	r3, r0, #1
 8001534:	89a3      	ldrh	r3, [r4, #12]
 8001536:	d106      	bne.n	8001546 <__sflush_r+0x62>
 8001538:	6829      	ldr	r1, [r5, #0]
 800153a:	291d      	cmp	r1, #29
 800153c:	d82c      	bhi.n	8001598 <__sflush_r+0xb4>
 800153e:	4a29      	ldr	r2, [pc, #164]	; (80015e4 <__sflush_r+0x100>)
 8001540:	40ca      	lsrs	r2, r1
 8001542:	07d6      	lsls	r6, r2, #31
 8001544:	d528      	bpl.n	8001598 <__sflush_r+0xb4>
 8001546:	2200      	movs	r2, #0
 8001548:	6062      	str	r2, [r4, #4]
 800154a:	6922      	ldr	r2, [r4, #16]
 800154c:	04d9      	lsls	r1, r3, #19
 800154e:	6022      	str	r2, [r4, #0]
 8001550:	d504      	bpl.n	800155c <__sflush_r+0x78>
 8001552:	1c42      	adds	r2, r0, #1
 8001554:	d101      	bne.n	800155a <__sflush_r+0x76>
 8001556:	682b      	ldr	r3, [r5, #0]
 8001558:	b903      	cbnz	r3, 800155c <__sflush_r+0x78>
 800155a:	6560      	str	r0, [r4, #84]	; 0x54
 800155c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800155e:	602f      	str	r7, [r5, #0]
 8001560:	2900      	cmp	r1, #0
 8001562:	d0cb      	beq.n	80014fc <__sflush_r+0x18>
 8001564:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001568:	4299      	cmp	r1, r3
 800156a:	d002      	beq.n	8001572 <__sflush_r+0x8e>
 800156c:	4628      	mov	r0, r5
 800156e:	f000 f9d5 	bl	800191c <_free_r>
 8001572:	2000      	movs	r0, #0
 8001574:	6360      	str	r0, [r4, #52]	; 0x34
 8001576:	e7c2      	b.n	80014fe <__sflush_r+0x1a>
 8001578:	6a21      	ldr	r1, [r4, #32]
 800157a:	2301      	movs	r3, #1
 800157c:	4628      	mov	r0, r5
 800157e:	47b0      	blx	r6
 8001580:	1c41      	adds	r1, r0, #1
 8001582:	d1c7      	bne.n	8001514 <__sflush_r+0x30>
 8001584:	682b      	ldr	r3, [r5, #0]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d0c4      	beq.n	8001514 <__sflush_r+0x30>
 800158a:	2b1d      	cmp	r3, #29
 800158c:	d001      	beq.n	8001592 <__sflush_r+0xae>
 800158e:	2b16      	cmp	r3, #22
 8001590:	d101      	bne.n	8001596 <__sflush_r+0xb2>
 8001592:	602f      	str	r7, [r5, #0]
 8001594:	e7b2      	b.n	80014fc <__sflush_r+0x18>
 8001596:	89a3      	ldrh	r3, [r4, #12]
 8001598:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800159c:	81a3      	strh	r3, [r4, #12]
 800159e:	e7ae      	b.n	80014fe <__sflush_r+0x1a>
 80015a0:	690f      	ldr	r7, [r1, #16]
 80015a2:	2f00      	cmp	r7, #0
 80015a4:	d0aa      	beq.n	80014fc <__sflush_r+0x18>
 80015a6:	0793      	lsls	r3, r2, #30
 80015a8:	bf18      	it	ne
 80015aa:	2300      	movne	r3, #0
 80015ac:	680e      	ldr	r6, [r1, #0]
 80015ae:	bf08      	it	eq
 80015b0:	694b      	ldreq	r3, [r1, #20]
 80015b2:	1bf6      	subs	r6, r6, r7
 80015b4:	600f      	str	r7, [r1, #0]
 80015b6:	608b      	str	r3, [r1, #8]
 80015b8:	2e00      	cmp	r6, #0
 80015ba:	dd9f      	ble.n	80014fc <__sflush_r+0x18>
 80015bc:	4633      	mov	r3, r6
 80015be:	463a      	mov	r2, r7
 80015c0:	4628      	mov	r0, r5
 80015c2:	6a21      	ldr	r1, [r4, #32]
 80015c4:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80015c8:	47e0      	blx	ip
 80015ca:	2800      	cmp	r0, #0
 80015cc:	dc06      	bgt.n	80015dc <__sflush_r+0xf8>
 80015ce:	89a3      	ldrh	r3, [r4, #12]
 80015d0:	f04f 30ff 	mov.w	r0, #4294967295
 80015d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80015d8:	81a3      	strh	r3, [r4, #12]
 80015da:	e790      	b.n	80014fe <__sflush_r+0x1a>
 80015dc:	4407      	add	r7, r0
 80015de:	1a36      	subs	r6, r6, r0
 80015e0:	e7ea      	b.n	80015b8 <__sflush_r+0xd4>
 80015e2:	bf00      	nop
 80015e4:	20400001 	.word	0x20400001

080015e8 <_fflush_r>:
 80015e8:	b538      	push	{r3, r4, r5, lr}
 80015ea:	690b      	ldr	r3, [r1, #16]
 80015ec:	4605      	mov	r5, r0
 80015ee:	460c      	mov	r4, r1
 80015f0:	b913      	cbnz	r3, 80015f8 <_fflush_r+0x10>
 80015f2:	2500      	movs	r5, #0
 80015f4:	4628      	mov	r0, r5
 80015f6:	bd38      	pop	{r3, r4, r5, pc}
 80015f8:	b118      	cbz	r0, 8001602 <_fflush_r+0x1a>
 80015fa:	6983      	ldr	r3, [r0, #24]
 80015fc:	b90b      	cbnz	r3, 8001602 <_fflush_r+0x1a>
 80015fe:	f000 f887 	bl	8001710 <__sinit>
 8001602:	4b14      	ldr	r3, [pc, #80]	; (8001654 <_fflush_r+0x6c>)
 8001604:	429c      	cmp	r4, r3
 8001606:	d11b      	bne.n	8001640 <_fflush_r+0x58>
 8001608:	686c      	ldr	r4, [r5, #4]
 800160a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800160e:	2b00      	cmp	r3, #0
 8001610:	d0ef      	beq.n	80015f2 <_fflush_r+0xa>
 8001612:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001614:	07d0      	lsls	r0, r2, #31
 8001616:	d404      	bmi.n	8001622 <_fflush_r+0x3a>
 8001618:	0599      	lsls	r1, r3, #22
 800161a:	d402      	bmi.n	8001622 <_fflush_r+0x3a>
 800161c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800161e:	f000 f915 	bl	800184c <__retarget_lock_acquire_recursive>
 8001622:	4628      	mov	r0, r5
 8001624:	4621      	mov	r1, r4
 8001626:	f7ff ff5d 	bl	80014e4 <__sflush_r>
 800162a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800162c:	4605      	mov	r5, r0
 800162e:	07da      	lsls	r2, r3, #31
 8001630:	d4e0      	bmi.n	80015f4 <_fflush_r+0xc>
 8001632:	89a3      	ldrh	r3, [r4, #12]
 8001634:	059b      	lsls	r3, r3, #22
 8001636:	d4dd      	bmi.n	80015f4 <_fflush_r+0xc>
 8001638:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800163a:	f000 f908 	bl	800184e <__retarget_lock_release_recursive>
 800163e:	e7d9      	b.n	80015f4 <_fflush_r+0xc>
 8001640:	4b05      	ldr	r3, [pc, #20]	; (8001658 <_fflush_r+0x70>)
 8001642:	429c      	cmp	r4, r3
 8001644:	d101      	bne.n	800164a <_fflush_r+0x62>
 8001646:	68ac      	ldr	r4, [r5, #8]
 8001648:	e7df      	b.n	800160a <_fflush_r+0x22>
 800164a:	4b04      	ldr	r3, [pc, #16]	; (800165c <_fflush_r+0x74>)
 800164c:	429c      	cmp	r4, r3
 800164e:	bf08      	it	eq
 8001650:	68ec      	ldreq	r4, [r5, #12]
 8001652:	e7da      	b.n	800160a <_fflush_r+0x22>
 8001654:	0800220c 	.word	0x0800220c
 8001658:	0800222c 	.word	0x0800222c
 800165c:	080021ec 	.word	0x080021ec

08001660 <std>:
 8001660:	2300      	movs	r3, #0
 8001662:	b510      	push	{r4, lr}
 8001664:	4604      	mov	r4, r0
 8001666:	e9c0 3300 	strd	r3, r3, [r0]
 800166a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800166e:	6083      	str	r3, [r0, #8]
 8001670:	8181      	strh	r1, [r0, #12]
 8001672:	6643      	str	r3, [r0, #100]	; 0x64
 8001674:	81c2      	strh	r2, [r0, #14]
 8001676:	6183      	str	r3, [r0, #24]
 8001678:	4619      	mov	r1, r3
 800167a:	2208      	movs	r2, #8
 800167c:	305c      	adds	r0, #92	; 0x5c
 800167e:	f7ff fdf3 	bl	8001268 <memset>
 8001682:	4b05      	ldr	r3, [pc, #20]	; (8001698 <std+0x38>)
 8001684:	6224      	str	r4, [r4, #32]
 8001686:	6263      	str	r3, [r4, #36]	; 0x24
 8001688:	4b04      	ldr	r3, [pc, #16]	; (800169c <std+0x3c>)
 800168a:	62a3      	str	r3, [r4, #40]	; 0x28
 800168c:	4b04      	ldr	r3, [pc, #16]	; (80016a0 <std+0x40>)
 800168e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001690:	4b04      	ldr	r3, [pc, #16]	; (80016a4 <std+0x44>)
 8001692:	6323      	str	r3, [r4, #48]	; 0x30
 8001694:	bd10      	pop	{r4, pc}
 8001696:	bf00      	nop
 8001698:	08001af5 	.word	0x08001af5
 800169c:	08001b17 	.word	0x08001b17
 80016a0:	08001b4f 	.word	0x08001b4f
 80016a4:	08001b73 	.word	0x08001b73

080016a8 <_cleanup_r>:
 80016a8:	4901      	ldr	r1, [pc, #4]	; (80016b0 <_cleanup_r+0x8>)
 80016aa:	f000 b8af 	b.w	800180c <_fwalk_reent>
 80016ae:	bf00      	nop
 80016b0:	080015e9 	.word	0x080015e9

080016b4 <__sfmoreglue>:
 80016b4:	2268      	movs	r2, #104	; 0x68
 80016b6:	b570      	push	{r4, r5, r6, lr}
 80016b8:	1e4d      	subs	r5, r1, #1
 80016ba:	4355      	muls	r5, r2
 80016bc:	460e      	mov	r6, r1
 80016be:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80016c2:	f000 f993 	bl	80019ec <_malloc_r>
 80016c6:	4604      	mov	r4, r0
 80016c8:	b140      	cbz	r0, 80016dc <__sfmoreglue+0x28>
 80016ca:	2100      	movs	r1, #0
 80016cc:	e9c0 1600 	strd	r1, r6, [r0]
 80016d0:	300c      	adds	r0, #12
 80016d2:	60a0      	str	r0, [r4, #8]
 80016d4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80016d8:	f7ff fdc6 	bl	8001268 <memset>
 80016dc:	4620      	mov	r0, r4
 80016de:	bd70      	pop	{r4, r5, r6, pc}

080016e0 <__sfp_lock_acquire>:
 80016e0:	4801      	ldr	r0, [pc, #4]	; (80016e8 <__sfp_lock_acquire+0x8>)
 80016e2:	f000 b8b3 	b.w	800184c <__retarget_lock_acquire_recursive>
 80016e6:	bf00      	nop
 80016e8:	2000009d 	.word	0x2000009d

080016ec <__sfp_lock_release>:
 80016ec:	4801      	ldr	r0, [pc, #4]	; (80016f4 <__sfp_lock_release+0x8>)
 80016ee:	f000 b8ae 	b.w	800184e <__retarget_lock_release_recursive>
 80016f2:	bf00      	nop
 80016f4:	2000009d 	.word	0x2000009d

080016f8 <__sinit_lock_acquire>:
 80016f8:	4801      	ldr	r0, [pc, #4]	; (8001700 <__sinit_lock_acquire+0x8>)
 80016fa:	f000 b8a7 	b.w	800184c <__retarget_lock_acquire_recursive>
 80016fe:	bf00      	nop
 8001700:	2000009e 	.word	0x2000009e

08001704 <__sinit_lock_release>:
 8001704:	4801      	ldr	r0, [pc, #4]	; (800170c <__sinit_lock_release+0x8>)
 8001706:	f000 b8a2 	b.w	800184e <__retarget_lock_release_recursive>
 800170a:	bf00      	nop
 800170c:	2000009e 	.word	0x2000009e

08001710 <__sinit>:
 8001710:	b510      	push	{r4, lr}
 8001712:	4604      	mov	r4, r0
 8001714:	f7ff fff0 	bl	80016f8 <__sinit_lock_acquire>
 8001718:	69a3      	ldr	r3, [r4, #24]
 800171a:	b11b      	cbz	r3, 8001724 <__sinit+0x14>
 800171c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001720:	f7ff bff0 	b.w	8001704 <__sinit_lock_release>
 8001724:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8001728:	6523      	str	r3, [r4, #80]	; 0x50
 800172a:	4b13      	ldr	r3, [pc, #76]	; (8001778 <__sinit+0x68>)
 800172c:	4a13      	ldr	r2, [pc, #76]	; (800177c <__sinit+0x6c>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	62a2      	str	r2, [r4, #40]	; 0x28
 8001732:	42a3      	cmp	r3, r4
 8001734:	bf08      	it	eq
 8001736:	2301      	moveq	r3, #1
 8001738:	4620      	mov	r0, r4
 800173a:	bf08      	it	eq
 800173c:	61a3      	streq	r3, [r4, #24]
 800173e:	f000 f81f 	bl	8001780 <__sfp>
 8001742:	6060      	str	r0, [r4, #4]
 8001744:	4620      	mov	r0, r4
 8001746:	f000 f81b 	bl	8001780 <__sfp>
 800174a:	60a0      	str	r0, [r4, #8]
 800174c:	4620      	mov	r0, r4
 800174e:	f000 f817 	bl	8001780 <__sfp>
 8001752:	2200      	movs	r2, #0
 8001754:	2104      	movs	r1, #4
 8001756:	60e0      	str	r0, [r4, #12]
 8001758:	6860      	ldr	r0, [r4, #4]
 800175a:	f7ff ff81 	bl	8001660 <std>
 800175e:	2201      	movs	r2, #1
 8001760:	2109      	movs	r1, #9
 8001762:	68a0      	ldr	r0, [r4, #8]
 8001764:	f7ff ff7c 	bl	8001660 <std>
 8001768:	2202      	movs	r2, #2
 800176a:	2112      	movs	r1, #18
 800176c:	68e0      	ldr	r0, [r4, #12]
 800176e:	f7ff ff77 	bl	8001660 <std>
 8001772:	2301      	movs	r3, #1
 8001774:	61a3      	str	r3, [r4, #24]
 8001776:	e7d1      	b.n	800171c <__sinit+0xc>
 8001778:	080021e8 	.word	0x080021e8
 800177c:	080016a9 	.word	0x080016a9

08001780 <__sfp>:
 8001780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001782:	4607      	mov	r7, r0
 8001784:	f7ff ffac 	bl	80016e0 <__sfp_lock_acquire>
 8001788:	4b1e      	ldr	r3, [pc, #120]	; (8001804 <__sfp+0x84>)
 800178a:	681e      	ldr	r6, [r3, #0]
 800178c:	69b3      	ldr	r3, [r6, #24]
 800178e:	b913      	cbnz	r3, 8001796 <__sfp+0x16>
 8001790:	4630      	mov	r0, r6
 8001792:	f7ff ffbd 	bl	8001710 <__sinit>
 8001796:	3648      	adds	r6, #72	; 0x48
 8001798:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800179c:	3b01      	subs	r3, #1
 800179e:	d503      	bpl.n	80017a8 <__sfp+0x28>
 80017a0:	6833      	ldr	r3, [r6, #0]
 80017a2:	b30b      	cbz	r3, 80017e8 <__sfp+0x68>
 80017a4:	6836      	ldr	r6, [r6, #0]
 80017a6:	e7f7      	b.n	8001798 <__sfp+0x18>
 80017a8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80017ac:	b9d5      	cbnz	r5, 80017e4 <__sfp+0x64>
 80017ae:	4b16      	ldr	r3, [pc, #88]	; (8001808 <__sfp+0x88>)
 80017b0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80017b4:	60e3      	str	r3, [r4, #12]
 80017b6:	6665      	str	r5, [r4, #100]	; 0x64
 80017b8:	f000 f847 	bl	800184a <__retarget_lock_init_recursive>
 80017bc:	f7ff ff96 	bl	80016ec <__sfp_lock_release>
 80017c0:	2208      	movs	r2, #8
 80017c2:	4629      	mov	r1, r5
 80017c4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80017c8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80017cc:	6025      	str	r5, [r4, #0]
 80017ce:	61a5      	str	r5, [r4, #24]
 80017d0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80017d4:	f7ff fd48 	bl	8001268 <memset>
 80017d8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80017dc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80017e0:	4620      	mov	r0, r4
 80017e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80017e4:	3468      	adds	r4, #104	; 0x68
 80017e6:	e7d9      	b.n	800179c <__sfp+0x1c>
 80017e8:	2104      	movs	r1, #4
 80017ea:	4638      	mov	r0, r7
 80017ec:	f7ff ff62 	bl	80016b4 <__sfmoreglue>
 80017f0:	4604      	mov	r4, r0
 80017f2:	6030      	str	r0, [r6, #0]
 80017f4:	2800      	cmp	r0, #0
 80017f6:	d1d5      	bne.n	80017a4 <__sfp+0x24>
 80017f8:	f7ff ff78 	bl	80016ec <__sfp_lock_release>
 80017fc:	230c      	movs	r3, #12
 80017fe:	603b      	str	r3, [r7, #0]
 8001800:	e7ee      	b.n	80017e0 <__sfp+0x60>
 8001802:	bf00      	nop
 8001804:	080021e8 	.word	0x080021e8
 8001808:	ffff0001 	.word	0xffff0001

0800180c <_fwalk_reent>:
 800180c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001810:	4606      	mov	r6, r0
 8001812:	4688      	mov	r8, r1
 8001814:	2700      	movs	r7, #0
 8001816:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800181a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800181e:	f1b9 0901 	subs.w	r9, r9, #1
 8001822:	d505      	bpl.n	8001830 <_fwalk_reent+0x24>
 8001824:	6824      	ldr	r4, [r4, #0]
 8001826:	2c00      	cmp	r4, #0
 8001828:	d1f7      	bne.n	800181a <_fwalk_reent+0xe>
 800182a:	4638      	mov	r0, r7
 800182c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001830:	89ab      	ldrh	r3, [r5, #12]
 8001832:	2b01      	cmp	r3, #1
 8001834:	d907      	bls.n	8001846 <_fwalk_reent+0x3a>
 8001836:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800183a:	3301      	adds	r3, #1
 800183c:	d003      	beq.n	8001846 <_fwalk_reent+0x3a>
 800183e:	4629      	mov	r1, r5
 8001840:	4630      	mov	r0, r6
 8001842:	47c0      	blx	r8
 8001844:	4307      	orrs	r7, r0
 8001846:	3568      	adds	r5, #104	; 0x68
 8001848:	e7e9      	b.n	800181e <_fwalk_reent+0x12>

0800184a <__retarget_lock_init_recursive>:
 800184a:	4770      	bx	lr

0800184c <__retarget_lock_acquire_recursive>:
 800184c:	4770      	bx	lr

0800184e <__retarget_lock_release_recursive>:
 800184e:	4770      	bx	lr

08001850 <__swhatbuf_r>:
 8001850:	b570      	push	{r4, r5, r6, lr}
 8001852:	460e      	mov	r6, r1
 8001854:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001858:	4614      	mov	r4, r2
 800185a:	2900      	cmp	r1, #0
 800185c:	461d      	mov	r5, r3
 800185e:	b096      	sub	sp, #88	; 0x58
 8001860:	da08      	bge.n	8001874 <__swhatbuf_r+0x24>
 8001862:	2200      	movs	r2, #0
 8001864:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8001868:	602a      	str	r2, [r5, #0]
 800186a:	061a      	lsls	r2, r3, #24
 800186c:	d410      	bmi.n	8001890 <__swhatbuf_r+0x40>
 800186e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001872:	e00e      	b.n	8001892 <__swhatbuf_r+0x42>
 8001874:	466a      	mov	r2, sp
 8001876:	f000 f9a3 	bl	8001bc0 <_fstat_r>
 800187a:	2800      	cmp	r0, #0
 800187c:	dbf1      	blt.n	8001862 <__swhatbuf_r+0x12>
 800187e:	9a01      	ldr	r2, [sp, #4]
 8001880:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8001884:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8001888:	425a      	negs	r2, r3
 800188a:	415a      	adcs	r2, r3
 800188c:	602a      	str	r2, [r5, #0]
 800188e:	e7ee      	b.n	800186e <__swhatbuf_r+0x1e>
 8001890:	2340      	movs	r3, #64	; 0x40
 8001892:	2000      	movs	r0, #0
 8001894:	6023      	str	r3, [r4, #0]
 8001896:	b016      	add	sp, #88	; 0x58
 8001898:	bd70      	pop	{r4, r5, r6, pc}
	...

0800189c <__smakebuf_r>:
 800189c:	898b      	ldrh	r3, [r1, #12]
 800189e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80018a0:	079d      	lsls	r5, r3, #30
 80018a2:	4606      	mov	r6, r0
 80018a4:	460c      	mov	r4, r1
 80018a6:	d507      	bpl.n	80018b8 <__smakebuf_r+0x1c>
 80018a8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80018ac:	6023      	str	r3, [r4, #0]
 80018ae:	6123      	str	r3, [r4, #16]
 80018b0:	2301      	movs	r3, #1
 80018b2:	6163      	str	r3, [r4, #20]
 80018b4:	b002      	add	sp, #8
 80018b6:	bd70      	pop	{r4, r5, r6, pc}
 80018b8:	466a      	mov	r2, sp
 80018ba:	ab01      	add	r3, sp, #4
 80018bc:	f7ff ffc8 	bl	8001850 <__swhatbuf_r>
 80018c0:	9900      	ldr	r1, [sp, #0]
 80018c2:	4605      	mov	r5, r0
 80018c4:	4630      	mov	r0, r6
 80018c6:	f000 f891 	bl	80019ec <_malloc_r>
 80018ca:	b948      	cbnz	r0, 80018e0 <__smakebuf_r+0x44>
 80018cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80018d0:	059a      	lsls	r2, r3, #22
 80018d2:	d4ef      	bmi.n	80018b4 <__smakebuf_r+0x18>
 80018d4:	f023 0303 	bic.w	r3, r3, #3
 80018d8:	f043 0302 	orr.w	r3, r3, #2
 80018dc:	81a3      	strh	r3, [r4, #12]
 80018de:	e7e3      	b.n	80018a8 <__smakebuf_r+0xc>
 80018e0:	4b0d      	ldr	r3, [pc, #52]	; (8001918 <__smakebuf_r+0x7c>)
 80018e2:	62b3      	str	r3, [r6, #40]	; 0x28
 80018e4:	89a3      	ldrh	r3, [r4, #12]
 80018e6:	6020      	str	r0, [r4, #0]
 80018e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018ec:	81a3      	strh	r3, [r4, #12]
 80018ee:	9b00      	ldr	r3, [sp, #0]
 80018f0:	6120      	str	r0, [r4, #16]
 80018f2:	6163      	str	r3, [r4, #20]
 80018f4:	9b01      	ldr	r3, [sp, #4]
 80018f6:	b15b      	cbz	r3, 8001910 <__smakebuf_r+0x74>
 80018f8:	4630      	mov	r0, r6
 80018fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80018fe:	f000 f971 	bl	8001be4 <_isatty_r>
 8001902:	b128      	cbz	r0, 8001910 <__smakebuf_r+0x74>
 8001904:	89a3      	ldrh	r3, [r4, #12]
 8001906:	f023 0303 	bic.w	r3, r3, #3
 800190a:	f043 0301 	orr.w	r3, r3, #1
 800190e:	81a3      	strh	r3, [r4, #12]
 8001910:	89a0      	ldrh	r0, [r4, #12]
 8001912:	4305      	orrs	r5, r0
 8001914:	81a5      	strh	r5, [r4, #12]
 8001916:	e7cd      	b.n	80018b4 <__smakebuf_r+0x18>
 8001918:	080016a9 	.word	0x080016a9

0800191c <_free_r>:
 800191c:	b538      	push	{r3, r4, r5, lr}
 800191e:	4605      	mov	r5, r0
 8001920:	2900      	cmp	r1, #0
 8001922:	d040      	beq.n	80019a6 <_free_r+0x8a>
 8001924:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001928:	1f0c      	subs	r4, r1, #4
 800192a:	2b00      	cmp	r3, #0
 800192c:	bfb8      	it	lt
 800192e:	18e4      	addlt	r4, r4, r3
 8001930:	f000 f97a 	bl	8001c28 <__malloc_lock>
 8001934:	4a1c      	ldr	r2, [pc, #112]	; (80019a8 <_free_r+0x8c>)
 8001936:	6813      	ldr	r3, [r2, #0]
 8001938:	b933      	cbnz	r3, 8001948 <_free_r+0x2c>
 800193a:	6063      	str	r3, [r4, #4]
 800193c:	6014      	str	r4, [r2, #0]
 800193e:	4628      	mov	r0, r5
 8001940:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001944:	f000 b976 	b.w	8001c34 <__malloc_unlock>
 8001948:	42a3      	cmp	r3, r4
 800194a:	d908      	bls.n	800195e <_free_r+0x42>
 800194c:	6820      	ldr	r0, [r4, #0]
 800194e:	1821      	adds	r1, r4, r0
 8001950:	428b      	cmp	r3, r1
 8001952:	bf01      	itttt	eq
 8001954:	6819      	ldreq	r1, [r3, #0]
 8001956:	685b      	ldreq	r3, [r3, #4]
 8001958:	1809      	addeq	r1, r1, r0
 800195a:	6021      	streq	r1, [r4, #0]
 800195c:	e7ed      	b.n	800193a <_free_r+0x1e>
 800195e:	461a      	mov	r2, r3
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	b10b      	cbz	r3, 8001968 <_free_r+0x4c>
 8001964:	42a3      	cmp	r3, r4
 8001966:	d9fa      	bls.n	800195e <_free_r+0x42>
 8001968:	6811      	ldr	r1, [r2, #0]
 800196a:	1850      	adds	r0, r2, r1
 800196c:	42a0      	cmp	r0, r4
 800196e:	d10b      	bne.n	8001988 <_free_r+0x6c>
 8001970:	6820      	ldr	r0, [r4, #0]
 8001972:	4401      	add	r1, r0
 8001974:	1850      	adds	r0, r2, r1
 8001976:	4283      	cmp	r3, r0
 8001978:	6011      	str	r1, [r2, #0]
 800197a:	d1e0      	bne.n	800193e <_free_r+0x22>
 800197c:	6818      	ldr	r0, [r3, #0]
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	4401      	add	r1, r0
 8001982:	6011      	str	r1, [r2, #0]
 8001984:	6053      	str	r3, [r2, #4]
 8001986:	e7da      	b.n	800193e <_free_r+0x22>
 8001988:	d902      	bls.n	8001990 <_free_r+0x74>
 800198a:	230c      	movs	r3, #12
 800198c:	602b      	str	r3, [r5, #0]
 800198e:	e7d6      	b.n	800193e <_free_r+0x22>
 8001990:	6820      	ldr	r0, [r4, #0]
 8001992:	1821      	adds	r1, r4, r0
 8001994:	428b      	cmp	r3, r1
 8001996:	bf01      	itttt	eq
 8001998:	6819      	ldreq	r1, [r3, #0]
 800199a:	685b      	ldreq	r3, [r3, #4]
 800199c:	1809      	addeq	r1, r1, r0
 800199e:	6021      	streq	r1, [r4, #0]
 80019a0:	6063      	str	r3, [r4, #4]
 80019a2:	6054      	str	r4, [r2, #4]
 80019a4:	e7cb      	b.n	800193e <_free_r+0x22>
 80019a6:	bd38      	pop	{r3, r4, r5, pc}
 80019a8:	200000a0 	.word	0x200000a0

080019ac <sbrk_aligned>:
 80019ac:	b570      	push	{r4, r5, r6, lr}
 80019ae:	4e0e      	ldr	r6, [pc, #56]	; (80019e8 <sbrk_aligned+0x3c>)
 80019b0:	460c      	mov	r4, r1
 80019b2:	6831      	ldr	r1, [r6, #0]
 80019b4:	4605      	mov	r5, r0
 80019b6:	b911      	cbnz	r1, 80019be <sbrk_aligned+0x12>
 80019b8:	f000 f88c 	bl	8001ad4 <_sbrk_r>
 80019bc:	6030      	str	r0, [r6, #0]
 80019be:	4621      	mov	r1, r4
 80019c0:	4628      	mov	r0, r5
 80019c2:	f000 f887 	bl	8001ad4 <_sbrk_r>
 80019c6:	1c43      	adds	r3, r0, #1
 80019c8:	d00a      	beq.n	80019e0 <sbrk_aligned+0x34>
 80019ca:	1cc4      	adds	r4, r0, #3
 80019cc:	f024 0403 	bic.w	r4, r4, #3
 80019d0:	42a0      	cmp	r0, r4
 80019d2:	d007      	beq.n	80019e4 <sbrk_aligned+0x38>
 80019d4:	1a21      	subs	r1, r4, r0
 80019d6:	4628      	mov	r0, r5
 80019d8:	f000 f87c 	bl	8001ad4 <_sbrk_r>
 80019dc:	3001      	adds	r0, #1
 80019de:	d101      	bne.n	80019e4 <sbrk_aligned+0x38>
 80019e0:	f04f 34ff 	mov.w	r4, #4294967295
 80019e4:	4620      	mov	r0, r4
 80019e6:	bd70      	pop	{r4, r5, r6, pc}
 80019e8:	200000a4 	.word	0x200000a4

080019ec <_malloc_r>:
 80019ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80019f0:	1ccd      	adds	r5, r1, #3
 80019f2:	f025 0503 	bic.w	r5, r5, #3
 80019f6:	3508      	adds	r5, #8
 80019f8:	2d0c      	cmp	r5, #12
 80019fa:	bf38      	it	cc
 80019fc:	250c      	movcc	r5, #12
 80019fe:	2d00      	cmp	r5, #0
 8001a00:	4607      	mov	r7, r0
 8001a02:	db01      	blt.n	8001a08 <_malloc_r+0x1c>
 8001a04:	42a9      	cmp	r1, r5
 8001a06:	d905      	bls.n	8001a14 <_malloc_r+0x28>
 8001a08:	230c      	movs	r3, #12
 8001a0a:	2600      	movs	r6, #0
 8001a0c:	603b      	str	r3, [r7, #0]
 8001a0e:	4630      	mov	r0, r6
 8001a10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001a14:	4e2e      	ldr	r6, [pc, #184]	; (8001ad0 <_malloc_r+0xe4>)
 8001a16:	f000 f907 	bl	8001c28 <__malloc_lock>
 8001a1a:	6833      	ldr	r3, [r6, #0]
 8001a1c:	461c      	mov	r4, r3
 8001a1e:	bb34      	cbnz	r4, 8001a6e <_malloc_r+0x82>
 8001a20:	4629      	mov	r1, r5
 8001a22:	4638      	mov	r0, r7
 8001a24:	f7ff ffc2 	bl	80019ac <sbrk_aligned>
 8001a28:	1c43      	adds	r3, r0, #1
 8001a2a:	4604      	mov	r4, r0
 8001a2c:	d14d      	bne.n	8001aca <_malloc_r+0xde>
 8001a2e:	6834      	ldr	r4, [r6, #0]
 8001a30:	4626      	mov	r6, r4
 8001a32:	2e00      	cmp	r6, #0
 8001a34:	d140      	bne.n	8001ab8 <_malloc_r+0xcc>
 8001a36:	6823      	ldr	r3, [r4, #0]
 8001a38:	4631      	mov	r1, r6
 8001a3a:	4638      	mov	r0, r7
 8001a3c:	eb04 0803 	add.w	r8, r4, r3
 8001a40:	f000 f848 	bl	8001ad4 <_sbrk_r>
 8001a44:	4580      	cmp	r8, r0
 8001a46:	d13a      	bne.n	8001abe <_malloc_r+0xd2>
 8001a48:	6821      	ldr	r1, [r4, #0]
 8001a4a:	3503      	adds	r5, #3
 8001a4c:	1a6d      	subs	r5, r5, r1
 8001a4e:	f025 0503 	bic.w	r5, r5, #3
 8001a52:	3508      	adds	r5, #8
 8001a54:	2d0c      	cmp	r5, #12
 8001a56:	bf38      	it	cc
 8001a58:	250c      	movcc	r5, #12
 8001a5a:	4638      	mov	r0, r7
 8001a5c:	4629      	mov	r1, r5
 8001a5e:	f7ff ffa5 	bl	80019ac <sbrk_aligned>
 8001a62:	3001      	adds	r0, #1
 8001a64:	d02b      	beq.n	8001abe <_malloc_r+0xd2>
 8001a66:	6823      	ldr	r3, [r4, #0]
 8001a68:	442b      	add	r3, r5
 8001a6a:	6023      	str	r3, [r4, #0]
 8001a6c:	e00e      	b.n	8001a8c <_malloc_r+0xa0>
 8001a6e:	6822      	ldr	r2, [r4, #0]
 8001a70:	1b52      	subs	r2, r2, r5
 8001a72:	d41e      	bmi.n	8001ab2 <_malloc_r+0xc6>
 8001a74:	2a0b      	cmp	r2, #11
 8001a76:	d916      	bls.n	8001aa6 <_malloc_r+0xba>
 8001a78:	1961      	adds	r1, r4, r5
 8001a7a:	42a3      	cmp	r3, r4
 8001a7c:	6025      	str	r5, [r4, #0]
 8001a7e:	bf18      	it	ne
 8001a80:	6059      	strne	r1, [r3, #4]
 8001a82:	6863      	ldr	r3, [r4, #4]
 8001a84:	bf08      	it	eq
 8001a86:	6031      	streq	r1, [r6, #0]
 8001a88:	5162      	str	r2, [r4, r5]
 8001a8a:	604b      	str	r3, [r1, #4]
 8001a8c:	4638      	mov	r0, r7
 8001a8e:	f104 060b 	add.w	r6, r4, #11
 8001a92:	f000 f8cf 	bl	8001c34 <__malloc_unlock>
 8001a96:	f026 0607 	bic.w	r6, r6, #7
 8001a9a:	1d23      	adds	r3, r4, #4
 8001a9c:	1af2      	subs	r2, r6, r3
 8001a9e:	d0b6      	beq.n	8001a0e <_malloc_r+0x22>
 8001aa0:	1b9b      	subs	r3, r3, r6
 8001aa2:	50a3      	str	r3, [r4, r2]
 8001aa4:	e7b3      	b.n	8001a0e <_malloc_r+0x22>
 8001aa6:	6862      	ldr	r2, [r4, #4]
 8001aa8:	42a3      	cmp	r3, r4
 8001aaa:	bf0c      	ite	eq
 8001aac:	6032      	streq	r2, [r6, #0]
 8001aae:	605a      	strne	r2, [r3, #4]
 8001ab0:	e7ec      	b.n	8001a8c <_malloc_r+0xa0>
 8001ab2:	4623      	mov	r3, r4
 8001ab4:	6864      	ldr	r4, [r4, #4]
 8001ab6:	e7b2      	b.n	8001a1e <_malloc_r+0x32>
 8001ab8:	4634      	mov	r4, r6
 8001aba:	6876      	ldr	r6, [r6, #4]
 8001abc:	e7b9      	b.n	8001a32 <_malloc_r+0x46>
 8001abe:	230c      	movs	r3, #12
 8001ac0:	4638      	mov	r0, r7
 8001ac2:	603b      	str	r3, [r7, #0]
 8001ac4:	f000 f8b6 	bl	8001c34 <__malloc_unlock>
 8001ac8:	e7a1      	b.n	8001a0e <_malloc_r+0x22>
 8001aca:	6025      	str	r5, [r4, #0]
 8001acc:	e7de      	b.n	8001a8c <_malloc_r+0xa0>
 8001ace:	bf00      	nop
 8001ad0:	200000a0 	.word	0x200000a0

08001ad4 <_sbrk_r>:
 8001ad4:	b538      	push	{r3, r4, r5, lr}
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	4d05      	ldr	r5, [pc, #20]	; (8001af0 <_sbrk_r+0x1c>)
 8001ada:	4604      	mov	r4, r0
 8001adc:	4608      	mov	r0, r1
 8001ade:	602b      	str	r3, [r5, #0]
 8001ae0:	f7fe fc52 	bl	8000388 <_sbrk>
 8001ae4:	1c43      	adds	r3, r0, #1
 8001ae6:	d102      	bne.n	8001aee <_sbrk_r+0x1a>
 8001ae8:	682b      	ldr	r3, [r5, #0]
 8001aea:	b103      	cbz	r3, 8001aee <_sbrk_r+0x1a>
 8001aec:	6023      	str	r3, [r4, #0]
 8001aee:	bd38      	pop	{r3, r4, r5, pc}
 8001af0:	200000a8 	.word	0x200000a8

08001af4 <__sread>:
 8001af4:	b510      	push	{r4, lr}
 8001af6:	460c      	mov	r4, r1
 8001af8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001afc:	f000 f8a0 	bl	8001c40 <_read_r>
 8001b00:	2800      	cmp	r0, #0
 8001b02:	bfab      	itete	ge
 8001b04:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8001b06:	89a3      	ldrhlt	r3, [r4, #12]
 8001b08:	181b      	addge	r3, r3, r0
 8001b0a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8001b0e:	bfac      	ite	ge
 8001b10:	6563      	strge	r3, [r4, #84]	; 0x54
 8001b12:	81a3      	strhlt	r3, [r4, #12]
 8001b14:	bd10      	pop	{r4, pc}

08001b16 <__swrite>:
 8001b16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001b1a:	461f      	mov	r7, r3
 8001b1c:	898b      	ldrh	r3, [r1, #12]
 8001b1e:	4605      	mov	r5, r0
 8001b20:	05db      	lsls	r3, r3, #23
 8001b22:	460c      	mov	r4, r1
 8001b24:	4616      	mov	r6, r2
 8001b26:	d505      	bpl.n	8001b34 <__swrite+0x1e>
 8001b28:	2302      	movs	r3, #2
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001b30:	f000 f868 	bl	8001c04 <_lseek_r>
 8001b34:	89a3      	ldrh	r3, [r4, #12]
 8001b36:	4632      	mov	r2, r6
 8001b38:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001b3c:	81a3      	strh	r3, [r4, #12]
 8001b3e:	4628      	mov	r0, r5
 8001b40:	463b      	mov	r3, r7
 8001b42:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001b46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001b4a:	f000 b817 	b.w	8001b7c <_write_r>

08001b4e <__sseek>:
 8001b4e:	b510      	push	{r4, lr}
 8001b50:	460c      	mov	r4, r1
 8001b52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001b56:	f000 f855 	bl	8001c04 <_lseek_r>
 8001b5a:	1c43      	adds	r3, r0, #1
 8001b5c:	89a3      	ldrh	r3, [r4, #12]
 8001b5e:	bf15      	itete	ne
 8001b60:	6560      	strne	r0, [r4, #84]	; 0x54
 8001b62:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8001b66:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8001b6a:	81a3      	strheq	r3, [r4, #12]
 8001b6c:	bf18      	it	ne
 8001b6e:	81a3      	strhne	r3, [r4, #12]
 8001b70:	bd10      	pop	{r4, pc}

08001b72 <__sclose>:
 8001b72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001b76:	f000 b813 	b.w	8001ba0 <_close_r>
	...

08001b7c <_write_r>:
 8001b7c:	b538      	push	{r3, r4, r5, lr}
 8001b7e:	4604      	mov	r4, r0
 8001b80:	4608      	mov	r0, r1
 8001b82:	4611      	mov	r1, r2
 8001b84:	2200      	movs	r2, #0
 8001b86:	4d05      	ldr	r5, [pc, #20]	; (8001b9c <_write_r+0x20>)
 8001b88:	602a      	str	r2, [r5, #0]
 8001b8a:	461a      	mov	r2, r3
 8001b8c:	f000 f90f 	bl	8001dae <_write>
 8001b90:	1c43      	adds	r3, r0, #1
 8001b92:	d102      	bne.n	8001b9a <_write_r+0x1e>
 8001b94:	682b      	ldr	r3, [r5, #0]
 8001b96:	b103      	cbz	r3, 8001b9a <_write_r+0x1e>
 8001b98:	6023      	str	r3, [r4, #0]
 8001b9a:	bd38      	pop	{r3, r4, r5, pc}
 8001b9c:	200000a8 	.word	0x200000a8

08001ba0 <_close_r>:
 8001ba0:	b538      	push	{r3, r4, r5, lr}
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	4d05      	ldr	r5, [pc, #20]	; (8001bbc <_close_r+0x1c>)
 8001ba6:	4604      	mov	r4, r0
 8001ba8:	4608      	mov	r0, r1
 8001baa:	602b      	str	r3, [r5, #0]
 8001bac:	f000 f92c 	bl	8001e08 <_close>
 8001bb0:	1c43      	adds	r3, r0, #1
 8001bb2:	d102      	bne.n	8001bba <_close_r+0x1a>
 8001bb4:	682b      	ldr	r3, [r5, #0]
 8001bb6:	b103      	cbz	r3, 8001bba <_close_r+0x1a>
 8001bb8:	6023      	str	r3, [r4, #0]
 8001bba:	bd38      	pop	{r3, r4, r5, pc}
 8001bbc:	200000a8 	.word	0x200000a8

08001bc0 <_fstat_r>:
 8001bc0:	b538      	push	{r3, r4, r5, lr}
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	4d06      	ldr	r5, [pc, #24]	; (8001be0 <_fstat_r+0x20>)
 8001bc6:	4604      	mov	r4, r0
 8001bc8:	4608      	mov	r0, r1
 8001bca:	4611      	mov	r1, r2
 8001bcc:	602b      	str	r3, [r5, #0]
 8001bce:	f000 f962 	bl	8001e96 <_fstat>
 8001bd2:	1c43      	adds	r3, r0, #1
 8001bd4:	d102      	bne.n	8001bdc <_fstat_r+0x1c>
 8001bd6:	682b      	ldr	r3, [r5, #0]
 8001bd8:	b103      	cbz	r3, 8001bdc <_fstat_r+0x1c>
 8001bda:	6023      	str	r3, [r4, #0]
 8001bdc:	bd38      	pop	{r3, r4, r5, pc}
 8001bde:	bf00      	nop
 8001be0:	200000a8 	.word	0x200000a8

08001be4 <_isatty_r>:
 8001be4:	b538      	push	{r3, r4, r5, lr}
 8001be6:	2300      	movs	r3, #0
 8001be8:	4d05      	ldr	r5, [pc, #20]	; (8001c00 <_isatty_r+0x1c>)
 8001bea:	4604      	mov	r4, r0
 8001bec:	4608      	mov	r0, r1
 8001bee:	602b      	str	r3, [r5, #0]
 8001bf0:	f000 fab8 	bl	8002164 <_isatty>
 8001bf4:	1c43      	adds	r3, r0, #1
 8001bf6:	d102      	bne.n	8001bfe <_isatty_r+0x1a>
 8001bf8:	682b      	ldr	r3, [r5, #0]
 8001bfa:	b103      	cbz	r3, 8001bfe <_isatty_r+0x1a>
 8001bfc:	6023      	str	r3, [r4, #0]
 8001bfe:	bd38      	pop	{r3, r4, r5, pc}
 8001c00:	200000a8 	.word	0x200000a8

08001c04 <_lseek_r>:
 8001c04:	b538      	push	{r3, r4, r5, lr}
 8001c06:	4604      	mov	r4, r0
 8001c08:	4608      	mov	r0, r1
 8001c0a:	4611      	mov	r1, r2
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	4d05      	ldr	r5, [pc, #20]	; (8001c24 <_lseek_r+0x20>)
 8001c10:	602a      	str	r2, [r5, #0]
 8001c12:	461a      	mov	r2, r3
 8001c14:	f000 f8b9 	bl	8001d8a <_lseek>
 8001c18:	1c43      	adds	r3, r0, #1
 8001c1a:	d102      	bne.n	8001c22 <_lseek_r+0x1e>
 8001c1c:	682b      	ldr	r3, [r5, #0]
 8001c1e:	b103      	cbz	r3, 8001c22 <_lseek_r+0x1e>
 8001c20:	6023      	str	r3, [r4, #0]
 8001c22:	bd38      	pop	{r3, r4, r5, pc}
 8001c24:	200000a8 	.word	0x200000a8

08001c28 <__malloc_lock>:
 8001c28:	4801      	ldr	r0, [pc, #4]	; (8001c30 <__malloc_lock+0x8>)
 8001c2a:	f7ff be0f 	b.w	800184c <__retarget_lock_acquire_recursive>
 8001c2e:	bf00      	nop
 8001c30:	2000009c 	.word	0x2000009c

08001c34 <__malloc_unlock>:
 8001c34:	4801      	ldr	r0, [pc, #4]	; (8001c3c <__malloc_unlock+0x8>)
 8001c36:	f7ff be0a 	b.w	800184e <__retarget_lock_release_recursive>
 8001c3a:	bf00      	nop
 8001c3c:	2000009c 	.word	0x2000009c

08001c40 <_read_r>:
 8001c40:	b538      	push	{r3, r4, r5, lr}
 8001c42:	4604      	mov	r4, r0
 8001c44:	4608      	mov	r0, r1
 8001c46:	4611      	mov	r1, r2
 8001c48:	2200      	movs	r2, #0
 8001c4a:	4d05      	ldr	r5, [pc, #20]	; (8001c60 <_read_r+0x20>)
 8001c4c:	602a      	str	r2, [r5, #0]
 8001c4e:	461a      	mov	r2, r3
 8001c50:	f000 f845 	bl	8001cde <_read>
 8001c54:	1c43      	adds	r3, r0, #1
 8001c56:	d102      	bne.n	8001c5e <_read_r+0x1e>
 8001c58:	682b      	ldr	r3, [r5, #0]
 8001c5a:	b103      	cbz	r3, 8001c5e <_read_r+0x1e>
 8001c5c:	6023      	str	r3, [r4, #0]
 8001c5e:	bd38      	pop	{r3, r4, r5, pc}
 8001c60:	200000a8 	.word	0x200000a8

08001c64 <findslot>:
 8001c64:	4b0a      	ldr	r3, [pc, #40]	; (8001c90 <findslot+0x2c>)
 8001c66:	b510      	push	{r4, lr}
 8001c68:	4604      	mov	r4, r0
 8001c6a:	6818      	ldr	r0, [r3, #0]
 8001c6c:	b118      	cbz	r0, 8001c76 <findslot+0x12>
 8001c6e:	6983      	ldr	r3, [r0, #24]
 8001c70:	b90b      	cbnz	r3, 8001c76 <findslot+0x12>
 8001c72:	f7ff fd4d 	bl	8001710 <__sinit>
 8001c76:	2c13      	cmp	r4, #19
 8001c78:	d807      	bhi.n	8001c8a <findslot+0x26>
 8001c7a:	4806      	ldr	r0, [pc, #24]	; (8001c94 <findslot+0x30>)
 8001c7c:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 8001c80:	3201      	adds	r2, #1
 8001c82:	d002      	beq.n	8001c8a <findslot+0x26>
 8001c84:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8001c88:	bd10      	pop	{r4, pc}
 8001c8a:	2000      	movs	r0, #0
 8001c8c:	e7fc      	b.n	8001c88 <findslot+0x24>
 8001c8e:	bf00      	nop
 8001c90:	2000000c 	.word	0x2000000c
 8001c94:	200000b8 	.word	0x200000b8

08001c98 <error>:
 8001c98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c9a:	4604      	mov	r4, r0
 8001c9c:	f7ff faba 	bl	8001214 <__errno>
 8001ca0:	2613      	movs	r6, #19
 8001ca2:	4605      	mov	r5, r0
 8001ca4:	2700      	movs	r7, #0
 8001ca6:	4630      	mov	r0, r6
 8001ca8:	4639      	mov	r1, r7
 8001caa:	beab      	bkpt	0x00ab
 8001cac:	4606      	mov	r6, r0
 8001cae:	4620      	mov	r0, r4
 8001cb0:	602e      	str	r6, [r5, #0]
 8001cb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001cb4 <checkerror>:
 8001cb4:	1c43      	adds	r3, r0, #1
 8001cb6:	d101      	bne.n	8001cbc <checkerror+0x8>
 8001cb8:	f7ff bfee 	b.w	8001c98 <error>
 8001cbc:	4770      	bx	lr

08001cbe <_swiread>:
 8001cbe:	b530      	push	{r4, r5, lr}
 8001cc0:	b085      	sub	sp, #20
 8001cc2:	2406      	movs	r4, #6
 8001cc4:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8001cc8:	9203      	str	r2, [sp, #12]
 8001cca:	ad01      	add	r5, sp, #4
 8001ccc:	4620      	mov	r0, r4
 8001cce:	4629      	mov	r1, r5
 8001cd0:	beab      	bkpt	0x00ab
 8001cd2:	4604      	mov	r4, r0
 8001cd4:	4620      	mov	r0, r4
 8001cd6:	f7ff ffed 	bl	8001cb4 <checkerror>
 8001cda:	b005      	add	sp, #20
 8001cdc:	bd30      	pop	{r4, r5, pc}

08001cde <_read>:
 8001cde:	b570      	push	{r4, r5, r6, lr}
 8001ce0:	460e      	mov	r6, r1
 8001ce2:	4615      	mov	r5, r2
 8001ce4:	f7ff ffbe 	bl	8001c64 <findslot>
 8001ce8:	4604      	mov	r4, r0
 8001cea:	b930      	cbnz	r0, 8001cfa <_read+0x1c>
 8001cec:	f7ff fa92 	bl	8001214 <__errno>
 8001cf0:	2309      	movs	r3, #9
 8001cf2:	6003      	str	r3, [r0, #0]
 8001cf4:	f04f 30ff 	mov.w	r0, #4294967295
 8001cf8:	bd70      	pop	{r4, r5, r6, pc}
 8001cfa:	462a      	mov	r2, r5
 8001cfc:	4631      	mov	r1, r6
 8001cfe:	6800      	ldr	r0, [r0, #0]
 8001d00:	f7ff ffdd 	bl	8001cbe <_swiread>
 8001d04:	1c43      	adds	r3, r0, #1
 8001d06:	bf1f      	itttt	ne
 8001d08:	6863      	ldrne	r3, [r4, #4]
 8001d0a:	1a28      	subne	r0, r5, r0
 8001d0c:	181b      	addne	r3, r3, r0
 8001d0e:	6063      	strne	r3, [r4, #4]
 8001d10:	e7f2      	b.n	8001cf8 <_read+0x1a>

08001d12 <_swilseek>:
 8001d12:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001d14:	460c      	mov	r4, r1
 8001d16:	4616      	mov	r6, r2
 8001d18:	f7ff ffa4 	bl	8001c64 <findslot>
 8001d1c:	4605      	mov	r5, r0
 8001d1e:	b940      	cbnz	r0, 8001d32 <_swilseek+0x20>
 8001d20:	f7ff fa78 	bl	8001214 <__errno>
 8001d24:	2309      	movs	r3, #9
 8001d26:	6003      	str	r3, [r0, #0]
 8001d28:	f04f 34ff 	mov.w	r4, #4294967295
 8001d2c:	4620      	mov	r0, r4
 8001d2e:	b003      	add	sp, #12
 8001d30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d32:	2e02      	cmp	r6, #2
 8001d34:	d903      	bls.n	8001d3e <_swilseek+0x2c>
 8001d36:	f7ff fa6d 	bl	8001214 <__errno>
 8001d3a:	2316      	movs	r3, #22
 8001d3c:	e7f3      	b.n	8001d26 <_swilseek+0x14>
 8001d3e:	2e01      	cmp	r6, #1
 8001d40:	d112      	bne.n	8001d68 <_swilseek+0x56>
 8001d42:	6843      	ldr	r3, [r0, #4]
 8001d44:	18e4      	adds	r4, r4, r3
 8001d46:	d4f6      	bmi.n	8001d36 <_swilseek+0x24>
 8001d48:	682b      	ldr	r3, [r5, #0]
 8001d4a:	260a      	movs	r6, #10
 8001d4c:	466f      	mov	r7, sp
 8001d4e:	e9cd 3400 	strd	r3, r4, [sp]
 8001d52:	4630      	mov	r0, r6
 8001d54:	4639      	mov	r1, r7
 8001d56:	beab      	bkpt	0x00ab
 8001d58:	4606      	mov	r6, r0
 8001d5a:	4630      	mov	r0, r6
 8001d5c:	f7ff ffaa 	bl	8001cb4 <checkerror>
 8001d60:	2800      	cmp	r0, #0
 8001d62:	dbe1      	blt.n	8001d28 <_swilseek+0x16>
 8001d64:	606c      	str	r4, [r5, #4]
 8001d66:	e7e1      	b.n	8001d2c <_swilseek+0x1a>
 8001d68:	2e02      	cmp	r6, #2
 8001d6a:	d1ed      	bne.n	8001d48 <_swilseek+0x36>
 8001d6c:	6803      	ldr	r3, [r0, #0]
 8001d6e:	260c      	movs	r6, #12
 8001d70:	466f      	mov	r7, sp
 8001d72:	9300      	str	r3, [sp, #0]
 8001d74:	4630      	mov	r0, r6
 8001d76:	4639      	mov	r1, r7
 8001d78:	beab      	bkpt	0x00ab
 8001d7a:	4606      	mov	r6, r0
 8001d7c:	4630      	mov	r0, r6
 8001d7e:	f7ff ff99 	bl	8001cb4 <checkerror>
 8001d82:	1c43      	adds	r3, r0, #1
 8001d84:	d0d0      	beq.n	8001d28 <_swilseek+0x16>
 8001d86:	4404      	add	r4, r0
 8001d88:	e7de      	b.n	8001d48 <_swilseek+0x36>

08001d8a <_lseek>:
 8001d8a:	f7ff bfc2 	b.w	8001d12 <_swilseek>

08001d8e <_swiwrite>:
 8001d8e:	b530      	push	{r4, r5, lr}
 8001d90:	b085      	sub	sp, #20
 8001d92:	2405      	movs	r4, #5
 8001d94:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8001d98:	9203      	str	r2, [sp, #12]
 8001d9a:	ad01      	add	r5, sp, #4
 8001d9c:	4620      	mov	r0, r4
 8001d9e:	4629      	mov	r1, r5
 8001da0:	beab      	bkpt	0x00ab
 8001da2:	4604      	mov	r4, r0
 8001da4:	4620      	mov	r0, r4
 8001da6:	f7ff ff85 	bl	8001cb4 <checkerror>
 8001daa:	b005      	add	sp, #20
 8001dac:	bd30      	pop	{r4, r5, pc}

08001dae <_write>:
 8001dae:	b570      	push	{r4, r5, r6, lr}
 8001db0:	460e      	mov	r6, r1
 8001db2:	4615      	mov	r5, r2
 8001db4:	f7ff ff56 	bl	8001c64 <findslot>
 8001db8:	4604      	mov	r4, r0
 8001dba:	b930      	cbnz	r0, 8001dca <_write+0x1c>
 8001dbc:	f7ff fa2a 	bl	8001214 <__errno>
 8001dc0:	2309      	movs	r3, #9
 8001dc2:	6003      	str	r3, [r0, #0]
 8001dc4:	f04f 30ff 	mov.w	r0, #4294967295
 8001dc8:	bd70      	pop	{r4, r5, r6, pc}
 8001dca:	462a      	mov	r2, r5
 8001dcc:	4631      	mov	r1, r6
 8001dce:	6800      	ldr	r0, [r0, #0]
 8001dd0:	f7ff ffdd 	bl	8001d8e <_swiwrite>
 8001dd4:	1e03      	subs	r3, r0, #0
 8001dd6:	dbf5      	blt.n	8001dc4 <_write+0x16>
 8001dd8:	6862      	ldr	r2, [r4, #4]
 8001dda:	1ae8      	subs	r0, r5, r3
 8001ddc:	4402      	add	r2, r0
 8001dde:	42ab      	cmp	r3, r5
 8001de0:	6062      	str	r2, [r4, #4]
 8001de2:	d1f1      	bne.n	8001dc8 <_write+0x1a>
 8001de4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8001de8:	2000      	movs	r0, #0
 8001dea:	f7ff bf55 	b.w	8001c98 <error>

08001dee <_swiclose>:
 8001dee:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001df0:	2402      	movs	r4, #2
 8001df2:	9001      	str	r0, [sp, #4]
 8001df4:	ad01      	add	r5, sp, #4
 8001df6:	4620      	mov	r0, r4
 8001df8:	4629      	mov	r1, r5
 8001dfa:	beab      	bkpt	0x00ab
 8001dfc:	4604      	mov	r4, r0
 8001dfe:	4620      	mov	r0, r4
 8001e00:	f7ff ff58 	bl	8001cb4 <checkerror>
 8001e04:	b003      	add	sp, #12
 8001e06:	bd30      	pop	{r4, r5, pc}

08001e08 <_close>:
 8001e08:	b538      	push	{r3, r4, r5, lr}
 8001e0a:	4605      	mov	r5, r0
 8001e0c:	f7ff ff2a 	bl	8001c64 <findslot>
 8001e10:	4604      	mov	r4, r0
 8001e12:	b930      	cbnz	r0, 8001e22 <_close+0x1a>
 8001e14:	f7ff f9fe 	bl	8001214 <__errno>
 8001e18:	2309      	movs	r3, #9
 8001e1a:	6003      	str	r3, [r0, #0]
 8001e1c:	f04f 30ff 	mov.w	r0, #4294967295
 8001e20:	bd38      	pop	{r3, r4, r5, pc}
 8001e22:	3d01      	subs	r5, #1
 8001e24:	2d01      	cmp	r5, #1
 8001e26:	d809      	bhi.n	8001e3c <_close+0x34>
 8001e28:	4b09      	ldr	r3, [pc, #36]	; (8001e50 <_close+0x48>)
 8001e2a:	689a      	ldr	r2, [r3, #8]
 8001e2c:	691b      	ldr	r3, [r3, #16]
 8001e2e:	429a      	cmp	r2, r3
 8001e30:	d104      	bne.n	8001e3c <_close+0x34>
 8001e32:	f04f 33ff 	mov.w	r3, #4294967295
 8001e36:	6003      	str	r3, [r0, #0]
 8001e38:	2000      	movs	r0, #0
 8001e3a:	e7f1      	b.n	8001e20 <_close+0x18>
 8001e3c:	6820      	ldr	r0, [r4, #0]
 8001e3e:	f7ff ffd6 	bl	8001dee <_swiclose>
 8001e42:	2800      	cmp	r0, #0
 8001e44:	d1ec      	bne.n	8001e20 <_close+0x18>
 8001e46:	f04f 33ff 	mov.w	r3, #4294967295
 8001e4a:	6023      	str	r3, [r4, #0]
 8001e4c:	e7e8      	b.n	8001e20 <_close+0x18>
 8001e4e:	bf00      	nop
 8001e50:	200000b8 	.word	0x200000b8

08001e54 <_swistat>:
 8001e54:	b570      	push	{r4, r5, r6, lr}
 8001e56:	460c      	mov	r4, r1
 8001e58:	f7ff ff04 	bl	8001c64 <findslot>
 8001e5c:	4605      	mov	r5, r0
 8001e5e:	b930      	cbnz	r0, 8001e6e <_swistat+0x1a>
 8001e60:	f7ff f9d8 	bl	8001214 <__errno>
 8001e64:	2309      	movs	r3, #9
 8001e66:	6003      	str	r3, [r0, #0]
 8001e68:	f04f 30ff 	mov.w	r0, #4294967295
 8001e6c:	bd70      	pop	{r4, r5, r6, pc}
 8001e6e:	6863      	ldr	r3, [r4, #4]
 8001e70:	260c      	movs	r6, #12
 8001e72:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001e76:	6063      	str	r3, [r4, #4]
 8001e78:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e7c:	64a3      	str	r3, [r4, #72]	; 0x48
 8001e7e:	4630      	mov	r0, r6
 8001e80:	4629      	mov	r1, r5
 8001e82:	beab      	bkpt	0x00ab
 8001e84:	4605      	mov	r5, r0
 8001e86:	4628      	mov	r0, r5
 8001e88:	f7ff ff14 	bl	8001cb4 <checkerror>
 8001e8c:	1c43      	adds	r3, r0, #1
 8001e8e:	bf1c      	itt	ne
 8001e90:	6120      	strne	r0, [r4, #16]
 8001e92:	2000      	movne	r0, #0
 8001e94:	e7ea      	b.n	8001e6c <_swistat+0x18>

08001e96 <_fstat>:
 8001e96:	460b      	mov	r3, r1
 8001e98:	b510      	push	{r4, lr}
 8001e9a:	2100      	movs	r1, #0
 8001e9c:	4604      	mov	r4, r0
 8001e9e:	2258      	movs	r2, #88	; 0x58
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f7ff f9e1 	bl	8001268 <memset>
 8001ea6:	4601      	mov	r1, r0
 8001ea8:	4620      	mov	r0, r4
 8001eaa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001eae:	f7ff bfd1 	b.w	8001e54 <_swistat>

08001eb2 <_stat>:
 8001eb2:	b538      	push	{r3, r4, r5, lr}
 8001eb4:	460d      	mov	r5, r1
 8001eb6:	4604      	mov	r4, r0
 8001eb8:	2258      	movs	r2, #88	; 0x58
 8001eba:	2100      	movs	r1, #0
 8001ebc:	4628      	mov	r0, r5
 8001ebe:	f7ff f9d3 	bl	8001268 <memset>
 8001ec2:	4620      	mov	r0, r4
 8001ec4:	2100      	movs	r1, #0
 8001ec6:	f000 f811 	bl	8001eec <_swiopen>
 8001eca:	1c43      	adds	r3, r0, #1
 8001ecc:	4604      	mov	r4, r0
 8001ece:	d00b      	beq.n	8001ee8 <_stat+0x36>
 8001ed0:	686b      	ldr	r3, [r5, #4]
 8001ed2:	4629      	mov	r1, r5
 8001ed4:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8001ed8:	606b      	str	r3, [r5, #4]
 8001eda:	f7ff ffbb 	bl	8001e54 <_swistat>
 8001ede:	4605      	mov	r5, r0
 8001ee0:	4620      	mov	r0, r4
 8001ee2:	f7ff ff91 	bl	8001e08 <_close>
 8001ee6:	462c      	mov	r4, r5
 8001ee8:	4620      	mov	r0, r4
 8001eea:	bd38      	pop	{r3, r4, r5, pc}

08001eec <_swiopen>:
 8001eec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001ef0:	4607      	mov	r7, r0
 8001ef2:	460e      	mov	r6, r1
 8001ef4:	2500      	movs	r5, #0
 8001ef6:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 8001f9c <_swiopen+0xb0>
 8001efa:	b097      	sub	sp, #92	; 0x5c
 8001efc:	f858 4035 	ldr.w	r4, [r8, r5, lsl #3]
 8001f00:	1c61      	adds	r1, r4, #1
 8001f02:	d037      	beq.n	8001f74 <_swiopen+0x88>
 8001f04:	3501      	adds	r5, #1
 8001f06:	2d14      	cmp	r5, #20
 8001f08:	d1f8      	bne.n	8001efc <_swiopen+0x10>
 8001f0a:	f7ff f983 	bl	8001214 <__errno>
 8001f0e:	2318      	movs	r3, #24
 8001f10:	f04f 34ff 	mov.w	r4, #4294967295
 8001f14:	6003      	str	r3, [r0, #0]
 8001f16:	e03d      	b.n	8001f94 <_swiopen+0xa8>
 8001f18:	f240 6301 	movw	r3, #1537	; 0x601
 8001f1c:	f3c6 4400 	ubfx	r4, r6, #16, #1
 8001f20:	07b2      	lsls	r2, r6, #30
 8001f22:	bf48      	it	mi
 8001f24:	f044 0402 	orrmi.w	r4, r4, #2
 8001f28:	421e      	tst	r6, r3
 8001f2a:	bf18      	it	ne
 8001f2c:	f044 0404 	orrne.w	r4, r4, #4
 8001f30:	0733      	lsls	r3, r6, #28
 8001f32:	bf48      	it	mi
 8001f34:	f024 0404 	bicmi.w	r4, r4, #4
 8001f38:	4638      	mov	r0, r7
 8001f3a:	bf48      	it	mi
 8001f3c:	f044 0408 	orrmi.w	r4, r4, #8
 8001f40:	9700      	str	r7, [sp, #0]
 8001f42:	f7fe f903 	bl	800014c <strlen>
 8001f46:	e9cd 4001 	strd	r4, r0, [sp, #4]
 8001f4a:	2401      	movs	r4, #1
 8001f4c:	4620      	mov	r0, r4
 8001f4e:	4649      	mov	r1, r9
 8001f50:	beab      	bkpt	0x00ab
 8001f52:	4604      	mov	r4, r0
 8001f54:	2c00      	cmp	r4, #0
 8001f56:	db08      	blt.n	8001f6a <_swiopen+0x7e>
 8001f58:	2300      	movs	r3, #0
 8001f5a:	f848 4035 	str.w	r4, [r8, r5, lsl #3]
 8001f5e:	eb08 08c5 	add.w	r8, r8, r5, lsl #3
 8001f62:	462c      	mov	r4, r5
 8001f64:	f8c8 3004 	str.w	r3, [r8, #4]
 8001f68:	e014      	b.n	8001f94 <_swiopen+0xa8>
 8001f6a:	4620      	mov	r0, r4
 8001f6c:	f7ff fe94 	bl	8001c98 <error>
 8001f70:	4604      	mov	r4, r0
 8001f72:	e00f      	b.n	8001f94 <_swiopen+0xa8>
 8001f74:	f406 6320 	and.w	r3, r6, #2560	; 0xa00
 8001f78:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8001f7c:	46e9      	mov	r9, sp
 8001f7e:	d1cb      	bne.n	8001f18 <_swiopen+0x2c>
 8001f80:	4649      	mov	r1, r9
 8001f82:	4638      	mov	r0, r7
 8001f84:	f7ff ff95 	bl	8001eb2 <_stat>
 8001f88:	3001      	adds	r0, #1
 8001f8a:	d0c5      	beq.n	8001f18 <_swiopen+0x2c>
 8001f8c:	f7ff f942 	bl	8001214 <__errno>
 8001f90:	2311      	movs	r3, #17
 8001f92:	6003      	str	r3, [r0, #0]
 8001f94:	4620      	mov	r0, r4
 8001f96:	b017      	add	sp, #92	; 0x5c
 8001f98:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001f9c:	200000b8 	.word	0x200000b8

08001fa0 <_get_semihosting_exts>:
 8001fa0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8001fa4:	4606      	mov	r6, r0
 8001fa6:	460f      	mov	r7, r1
 8001fa8:	482a      	ldr	r0, [pc, #168]	; (8002054 <_get_semihosting_exts+0xb4>)
 8001faa:	2100      	movs	r1, #0
 8001fac:	4615      	mov	r5, r2
 8001fae:	f7ff ff9d 	bl	8001eec <_swiopen>
 8001fb2:	4604      	mov	r4, r0
 8001fb4:	462a      	mov	r2, r5
 8001fb6:	2100      	movs	r1, #0
 8001fb8:	4630      	mov	r0, r6
 8001fba:	f7ff f955 	bl	8001268 <memset>
 8001fbe:	1c63      	adds	r3, r4, #1
 8001fc0:	d016      	beq.n	8001ff0 <_get_semihosting_exts+0x50>
 8001fc2:	4620      	mov	r0, r4
 8001fc4:	f7ff fe4e 	bl	8001c64 <findslot>
 8001fc8:	f04f 080c 	mov.w	r8, #12
 8001fcc:	4681      	mov	r9, r0
 8001fce:	4640      	mov	r0, r8
 8001fd0:	4649      	mov	r1, r9
 8001fd2:	beab      	bkpt	0x00ab
 8001fd4:	4680      	mov	r8, r0
 8001fd6:	4640      	mov	r0, r8
 8001fd8:	f7ff fe6c 	bl	8001cb4 <checkerror>
 8001fdc:	2803      	cmp	r0, #3
 8001fde:	dd02      	ble.n	8001fe6 <_get_semihosting_exts+0x46>
 8001fe0:	1ec3      	subs	r3, r0, #3
 8001fe2:	42ab      	cmp	r3, r5
 8001fe4:	dc08      	bgt.n	8001ff8 <_get_semihosting_exts+0x58>
 8001fe6:	4620      	mov	r0, r4
 8001fe8:	f7ff ff0e 	bl	8001e08 <_close>
 8001fec:	f04f 34ff 	mov.w	r4, #4294967295
 8001ff0:	4620      	mov	r0, r4
 8001ff2:	b003      	add	sp, #12
 8001ff4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001ff8:	2204      	movs	r2, #4
 8001ffa:	4620      	mov	r0, r4
 8001ffc:	eb0d 0102 	add.w	r1, sp, r2
 8002000:	f7ff fe6d 	bl	8001cde <_read>
 8002004:	2803      	cmp	r0, #3
 8002006:	ddee      	ble.n	8001fe6 <_get_semihosting_exts+0x46>
 8002008:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800200c:	2b53      	cmp	r3, #83	; 0x53
 800200e:	d1ea      	bne.n	8001fe6 <_get_semihosting_exts+0x46>
 8002010:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8002014:	2b48      	cmp	r3, #72	; 0x48
 8002016:	d1e6      	bne.n	8001fe6 <_get_semihosting_exts+0x46>
 8002018:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800201c:	2b46      	cmp	r3, #70	; 0x46
 800201e:	d1e2      	bne.n	8001fe6 <_get_semihosting_exts+0x46>
 8002020:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002024:	2b42      	cmp	r3, #66	; 0x42
 8002026:	d1de      	bne.n	8001fe6 <_get_semihosting_exts+0x46>
 8002028:	2201      	movs	r2, #1
 800202a:	4639      	mov	r1, r7
 800202c:	4620      	mov	r0, r4
 800202e:	f7ff fe70 	bl	8001d12 <_swilseek>
 8002032:	2800      	cmp	r0, #0
 8002034:	dbd7      	blt.n	8001fe6 <_get_semihosting_exts+0x46>
 8002036:	462a      	mov	r2, r5
 8002038:	4631      	mov	r1, r6
 800203a:	4620      	mov	r0, r4
 800203c:	f7ff fe4f 	bl	8001cde <_read>
 8002040:	4605      	mov	r5, r0
 8002042:	4620      	mov	r0, r4
 8002044:	f7ff fee0 	bl	8001e08 <_close>
 8002048:	4628      	mov	r0, r5
 800204a:	f7ff fe33 	bl	8001cb4 <checkerror>
 800204e:	4604      	mov	r4, r0
 8002050:	e7ce      	b.n	8001ff0 <_get_semihosting_exts+0x50>
 8002052:	bf00      	nop
 8002054:	0800224c 	.word	0x0800224c

08002058 <initialise_semihosting_exts>:
 8002058:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800205a:	2100      	movs	r1, #0
 800205c:	2201      	movs	r2, #1
 800205e:	4d09      	ldr	r5, [pc, #36]	; (8002084 <initialise_semihosting_exts+0x2c>)
 8002060:	4c09      	ldr	r4, [pc, #36]	; (8002088 <initialise_semihosting_exts+0x30>)
 8002062:	a801      	add	r0, sp, #4
 8002064:	6029      	str	r1, [r5, #0]
 8002066:	6022      	str	r2, [r4, #0]
 8002068:	f7ff ff9a 	bl	8001fa0 <_get_semihosting_exts>
 800206c:	2800      	cmp	r0, #0
 800206e:	dd07      	ble.n	8002080 <initialise_semihosting_exts+0x28>
 8002070:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002074:	f003 0201 	and.w	r2, r3, #1
 8002078:	f003 0302 	and.w	r3, r3, #2
 800207c:	602a      	str	r2, [r5, #0]
 800207e:	6023      	str	r3, [r4, #0]
 8002080:	b003      	add	sp, #12
 8002082:	bd30      	pop	{r4, r5, pc}
 8002084:	20000070 	.word	0x20000070
 8002088:	20000074 	.word	0x20000074

0800208c <_has_ext_stdout_stderr>:
 800208c:	b510      	push	{r4, lr}
 800208e:	4c04      	ldr	r4, [pc, #16]	; (80020a0 <_has_ext_stdout_stderr+0x14>)
 8002090:	6823      	ldr	r3, [r4, #0]
 8002092:	2b00      	cmp	r3, #0
 8002094:	da01      	bge.n	800209a <_has_ext_stdout_stderr+0xe>
 8002096:	f7ff ffdf 	bl	8002058 <initialise_semihosting_exts>
 800209a:	6820      	ldr	r0, [r4, #0]
 800209c:	bd10      	pop	{r4, pc}
 800209e:	bf00      	nop
 80020a0:	20000074 	.word	0x20000074

080020a4 <initialise_monitor_handles>:
 80020a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80020a8:	2303      	movs	r3, #3
 80020aa:	2400      	movs	r4, #0
 80020ac:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 8002150 <initialise_monitor_handles+0xac>
 80020b0:	b085      	sub	sp, #20
 80020b2:	f8cd 9004 	str.w	r9, [sp, #4]
 80020b6:	af01      	add	r7, sp, #4
 80020b8:	9303      	str	r3, [sp, #12]
 80020ba:	2501      	movs	r5, #1
 80020bc:	9402      	str	r4, [sp, #8]
 80020be:	4628      	mov	r0, r5
 80020c0:	4639      	mov	r1, r7
 80020c2:	beab      	bkpt	0x00ab
 80020c4:	4605      	mov	r5, r0
 80020c6:	f04f 32ff 	mov.w	r2, #4294967295
 80020ca:	f8df 8088 	ldr.w	r8, [pc, #136]	; 8002154 <initialise_monitor_handles+0xb0>
 80020ce:	4623      	mov	r3, r4
 80020d0:	4c21      	ldr	r4, [pc, #132]	; (8002158 <initialise_monitor_handles+0xb4>)
 80020d2:	f8c8 5000 	str.w	r5, [r8]
 80020d6:	f844 2033 	str.w	r2, [r4, r3, lsl #3]
 80020da:	3301      	adds	r3, #1
 80020dc:	2b14      	cmp	r3, #20
 80020de:	d1fa      	bne.n	80020d6 <initialise_monitor_handles+0x32>
 80020e0:	f7ff ffd4 	bl	800208c <_has_ext_stdout_stderr>
 80020e4:	4d1d      	ldr	r5, [pc, #116]	; (800215c <initialise_monitor_handles+0xb8>)
 80020e6:	b1d0      	cbz	r0, 800211e <initialise_monitor_handles+0x7a>
 80020e8:	f04f 0a03 	mov.w	sl, #3
 80020ec:	2304      	movs	r3, #4
 80020ee:	f8cd 9004 	str.w	r9, [sp, #4]
 80020f2:	2601      	movs	r6, #1
 80020f4:	f8cd a00c 	str.w	sl, [sp, #12]
 80020f8:	9302      	str	r3, [sp, #8]
 80020fa:	4630      	mov	r0, r6
 80020fc:	4639      	mov	r1, r7
 80020fe:	beab      	bkpt	0x00ab
 8002100:	4683      	mov	fp, r0
 8002102:	4b17      	ldr	r3, [pc, #92]	; (8002160 <initialise_monitor_handles+0xbc>)
 8002104:	f8cd 9004 	str.w	r9, [sp, #4]
 8002108:	f8c3 b000 	str.w	fp, [r3]
 800210c:	2308      	movs	r3, #8
 800210e:	f8cd a00c 	str.w	sl, [sp, #12]
 8002112:	9302      	str	r3, [sp, #8]
 8002114:	4630      	mov	r0, r6
 8002116:	4639      	mov	r1, r7
 8002118:	beab      	bkpt	0x00ab
 800211a:	4606      	mov	r6, r0
 800211c:	602e      	str	r6, [r5, #0]
 800211e:	2600      	movs	r6, #0
 8002120:	682b      	ldr	r3, [r5, #0]
 8002122:	6066      	str	r6, [r4, #4]
 8002124:	3301      	adds	r3, #1
 8002126:	bf02      	ittt	eq
 8002128:	4b0d      	ldreq	r3, [pc, #52]	; (8002160 <initialise_monitor_handles+0xbc>)
 800212a:	681b      	ldreq	r3, [r3, #0]
 800212c:	602b      	streq	r3, [r5, #0]
 800212e:	f8d8 3000 	ldr.w	r3, [r8]
 8002132:	6023      	str	r3, [r4, #0]
 8002134:	f7ff ffaa 	bl	800208c <_has_ext_stdout_stderr>
 8002138:	b130      	cbz	r0, 8002148 <initialise_monitor_handles+0xa4>
 800213a:	4b09      	ldr	r3, [pc, #36]	; (8002160 <initialise_monitor_handles+0xbc>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	e9c4 3602 	strd	r3, r6, [r4, #8]
 8002142:	682b      	ldr	r3, [r5, #0]
 8002144:	e9c4 3604 	strd	r3, r6, [r4, #16]
 8002148:	b005      	add	sp, #20
 800214a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800214e:	bf00      	nop
 8002150:	08002262 	.word	0x08002262
 8002154:	200000b0 	.word	0x200000b0
 8002158:	200000b8 	.word	0x200000b8
 800215c:	200000ac 	.word	0x200000ac
 8002160:	200000b4 	.word	0x200000b4

08002164 <_isatty>:
 8002164:	b570      	push	{r4, r5, r6, lr}
 8002166:	f7ff fd7d 	bl	8001c64 <findslot>
 800216a:	2509      	movs	r5, #9
 800216c:	4604      	mov	r4, r0
 800216e:	b920      	cbnz	r0, 800217a <_isatty+0x16>
 8002170:	f7ff f850 	bl	8001214 <__errno>
 8002174:	6005      	str	r5, [r0, #0]
 8002176:	4620      	mov	r0, r4
 8002178:	bd70      	pop	{r4, r5, r6, pc}
 800217a:	4628      	mov	r0, r5
 800217c:	4621      	mov	r1, r4
 800217e:	beab      	bkpt	0x00ab
 8002180:	4604      	mov	r4, r0
 8002182:	2c01      	cmp	r4, #1
 8002184:	d0f7      	beq.n	8002176 <_isatty+0x12>
 8002186:	f7ff f845 	bl	8001214 <__errno>
 800218a:	2400      	movs	r4, #0
 800218c:	4605      	mov	r5, r0
 800218e:	2613      	movs	r6, #19
 8002190:	4630      	mov	r0, r6
 8002192:	4621      	mov	r1, r4
 8002194:	beab      	bkpt	0x00ab
 8002196:	4606      	mov	r6, r0
 8002198:	602e      	str	r6, [r5, #0]
 800219a:	e7ec      	b.n	8002176 <_isatty+0x12>

0800219c <_init>:
 800219c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800219e:	bf00      	nop
 80021a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80021a2:	bc08      	pop	{r3}
 80021a4:	469e      	mov	lr, r3
 80021a6:	4770      	bx	lr

080021a8 <_fini>:
 80021a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021aa:	bf00      	nop
 80021ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80021ae:	bc08      	pop	{r3}
 80021b0:	469e      	mov	lr, r3
 80021b2:	4770      	bx	lr
